{"version":3,"sources":["app.js"],"names":["start","SCREEN_WIDTH","SCREEN_HEIGHT","GRID_WIDTH","GRID_HEIGHT","VOID_RADIUS","CRUST_THICKNESS","SCREEN_CENTRE","ACTIVE_RADIUS","grid","Array","fill","map","r","getGridCoords","angle","radius","Math","floor","PI","renderGrid","ctx","fillStyle","fillRect","y","x","dx","dy","sqrt","getAngle","isSolid","getClickHandler","e","timestamp","startedAt","rect","target","getBoundingClientRect","clientX","left","clientY","top","scale","width","gridX","gridY","atan","fps","dotX","speed","lastElapsed","fpsUpdateDelay","update","t","round","render","font","fillText","window","performance","now","Date","last","step","now_","undefined","dt","min","requestAnimationFrame","init","console","log","view","setAttribute","getContext","addEventListener"],"mappings":"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","file":"app.f3eb0519.js","sourceRoot":"..\\src","sourcesContent":["const SCREEN_WIDTH = 640;\r\nconst SCREEN_HEIGHT = 480;\r\nconst GRID_WIDTH = 32;\r\nconst GRID_HEIGHT = 20;\r\nconst VOID_RADIUS = 16;\r\nconst CRUST_THICKNESS = 16;\r\nconst SCREEN_CENTRE = [(SCREEN_WIDTH - 1) / 2, (SCREEN_HEIGHT - 1) / 2];\r\n\r\nconst ACTIVE_RADIUS = SCREEN_HEIGHT / 2 - (VOID_RADIUS + CRUST_THICKNESS);\r\n\r\nconst grid = new Array(GRID_HEIGHT).fill(null).map((r) => {\r\n  return new Array(GRID_WIDTH).fill(0);\r\n});\r\n\r\ngrid[0] = [1, 1, 1];\r\ngrid[1] = [0, 0, 1];\r\n\r\ngrid[GRID_HEIGHT - 2].fill(1, 1, GRID_WIDTH - 1);\r\ngrid[GRID_HEIGHT - 3].fill(1, 2, GRID_WIDTH - 2);\r\n\r\nfunction getGridCoords(angle, radius) {\r\n  const gridX = Math.floor((angle / (2 * Math.PI)) * GRID_WIDTH);\r\n  const gridY = Math.floor(\r\n    ((radius - VOID_RADIUS) / ACTIVE_RADIUS) * GRID_HEIGHT\r\n  );\r\n  return [gridX, gridY];\r\n}\r\n\r\nfunction renderGrid(ctx) {\r\n  ctx.fillStyle = \"rgba(0, 0, 0, 1)\";\r\n  // fill circle*\r\n  ctx.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\r\n  ctx.fillStyle = `rgba(128, 128, 128, 1)`;\r\n\r\n  // for each pixel\r\n  for (let y = 0; y < SCREEN_HEIGHT; y += 2) {\r\n    for (let x = 0; x < SCREEN_WIDTH; x += 2) {\r\n      const dx = x - SCREEN_CENTRE[0];\r\n      const dy = y - SCREEN_CENTRE[1];\r\n\r\n      const radius = Math.sqrt(dx ** 2 + dy ** 2);\r\n      const angle = getAngle(dx, dy);\r\n\r\n      const [gridX, gridY] = getGridCoords(angle, radius);\r\n\r\n      // b = Math.floor(Math.random() * 128) + 128;\r\n      // g = Math.floor(Math.random() * 128) + 128;\r\n      \r\n      if (isSolid(gridX, gridY)) {\r\n        ctx.fillRect(x, y, 2, 2);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction isSolid(x, y) {\r\n  return grid[y] && grid[y][x];\r\n}\r\n\r\nfunction getClickHandler() {\r\n  return function handleClick(e) {\r\n    const startedAt = timestamp();\r\n    var rect = e.target.getBoundingClientRect();\r\n    var x = e.clientX - rect.left; //x position within the element.\r\n    var y = e.clientY - rect.top; //y position within the element.\r\n\r\n    var scale = SCREEN_WIDTH / rect.width;\r\n\r\n    x = x * scale;\r\n    y = y * scale;\r\n\r\n    const dx = x - SCREEN_CENTRE[0];\r\n    const dy = y - SCREEN_CENTRE[1];\r\n\r\n    const radius = Math.sqrt(dx ** 2 + dy ** 2);\r\n    const angle = getAngle(dx, dy);\r\n\r\n    // ctx.strokeStyle = \"white\";\r\n    // ctx.lineWidth = 1;\r\n    // ctx.beginPath();\r\n    // ctx.moveTo(...SCREEN_CENTRE);\r\n    // ctx.lineTo(x, y);\r\n    // ctx.closePath();\r\n    // ctx.stroke();\r\n\r\n    const [gridX, gridY] = getGridCoords(angle, radius);\r\n    grid[gridY] && (grid[gridY][gridX] = 1);\r\n  };\r\n}\r\n\r\n/**\r\n * Get angle from top, clockwise, positive\r\n * @param {number} x\r\n * @param {number} y\r\n */\r\nfunction getAngle(x, y) {\r\n  return (\r\n    Math.atan(y / x) +\r\n    // Reorient from top\r\n    Math.PI / 2 +\r\n    // Add half-turn for angles on the left-hand side\r\n    Math.PI * (x < 0)\r\n  );\r\n  // return angle;\r\n}\r\n\r\nlet start;\r\nlet dotX = 0;\r\nconst speed = (1 / 30) / 32;\r\nlet lastElapsed = 0;\r\nlet fps;\r\nlet fpsUpdateDelay = 0;\r\n\r\nfunction update(t) {\r\n  dotX = (dotX + speed * t) % GRID_WIDTH;\r\n\r\n  // secondsPassed = t / 1000;\r\n  fpsUpdateDelay += t;\r\n  if (fpsUpdateDelay > 1000) {\r\n    fpsUpdateDelay = 0;\r\n    fps = Math.round(1 / (t / 1000));\r\n  }\r\n\r\n  grid[10].fill(0);\r\n  grid[10][Math.floor(dotX)] = 1;\r\n}\r\n\r\nfunction render() {\r\n  renderGrid(ctx);\r\n  // Draw number to the screen\r\n  ctx.fillStyle = 'white';\r\n  ctx.fillRect(0, 0, 160, 60);\r\n  ctx.font = '25px Arial';\r\n  ctx.fillStyle = 'black';\r\n  ctx.fillText(\"FPS: \" + fps, 10, 30);\r\n}\r\n\r\nfunction timestamp() {\r\n  return window.performance && window.performance.now\r\n    ? window.performance.now()\r\n    : Date.now();\r\n}\r\n\r\nlet ctx;\r\n\r\nlet last = timestamp();\r\n\r\nfunction step(now_) {\r\n  now = timestamp();\r\n  if (start === undefined) start = now;\r\n  const elapsed = now - start;\r\n  dt = Math.min(1000, now - last);\r\n  \r\n\r\n  update(dt);\r\n  render();\r\n\r\n  last = now;\r\n  \r\n  window.requestAnimationFrame(step);\r\n}\r\n\r\nwindow.requestAnimationFrame(step);\r\n\r\nfunction init() {\r\n  console.log(\"init()\");\r\n  console.log(grid);\r\n  view.setAttribute(\"width\", SCREEN_WIDTH);\r\n  view.setAttribute(\"height\", SCREEN_HEIGHT);\r\n  ctx = view.getContext(\"2d\");\r\n\r\n  renderGrid(ctx);\r\n  view.addEventListener(\"click\", getClickHandler(ctx));\r\n  window.requestAnimationFrame(step);\r\n}\r\n\r\ninit();\r\n"]}