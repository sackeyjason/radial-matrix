{"version":3,"sources":["fps.js","mode_selector.js","input.js","../node_modules/shuffle-array/index.js","game.js","geometry.js","../node_modules/browser-split/index.js","../node_modules/indexof/index.js","../node_modules/class-list/index.js","../node_modules/hyperscript/index.js","app.js"],"names":["fpsUpdateDelay","updateFps","t","Math","round","renderFps","ctx","fps","fillStyle","fillRect","font","fillText","ModeSelector","select","events","mode","init","addEventListener","value","push","input","keyMap","el","event","keyCode","querySelectorAll","forEach","button","target","dataset","DEFAULT_OPTIONS","screenWidth","screenHeight","gridWidth","gridHeight","voidRadius","crustThickness","queue","getWrapX","GRID_WIDTH","wrapX","x","getPieceGridCoords","piece","grid","length","coords","shape","line","y","block","map","angle","xTranslation","centre","yTranslation","_x","_y","doesCollide","collides","pieces","i","z","s","o","l","j","spawn","type","getNext","shift","pieceTypes","Object","keys","removeLines","lines","reverse","splice","newEmptyRow","Array","fill","unshift","getCircleToGrid","GRID_HEIGHT","VOID_RADIUS","ACTIVE_RADIUS","radius","floor","PI","halfPi","getAngle","atan","grid2","SCREEN_WIDTH","SCREEN_HEIGHT","CRUST_THICKNESS","SCREEN_CENTRE","circleRadius","circle","bottom","w","modeSelector","clearing","mainMenu","clearGrid","row","gridLookup","getGridCoords","renderGrid","pixelHeight","hue","dotX","xCentre","yCentre","dx","dy","sqrt","gridX","gridY","fuzz","random","shock","activePiece","clearingRow","hue2","getClickHandler","e","timestamp","startedAt","rect","getBoundingClientRect","clientX","left","clientY","top","scale","width","lockPieceIn","start","shockDecay","processEvent","menuEl","document","querySelector","parentElement","removeChild","speed","update","max","slice","at","completeLines","undefined","find","showMainMenu","menuScreen","appendChild","render","window","performance","now","Date","last","step","min","requestAnimationFrame","view","setAttribute","getContext","console","log"],"mappings":"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","file":"app.adc9daa0.js","sourceRoot":"..\\src","sourcesContent":["let fpsUpdateDelay = 0;\r\n\r\nexport function updateFps(t) {\r\n  fpsUpdateDelay += t;\r\n  if (fpsUpdateDelay > 1000) {\r\n    fpsUpdateDelay = 0;\r\n    return Math.round(1 / (t / 1000));\r\n  }\r\n}\r\n\r\n\r\nexport function renderFps(ctx, fps) {\r\n  // Draw number to the screen\r\n  ctx.fillStyle = \"#333\";\r\n  ctx.fillRect(0, 0, 80, 32);\r\n  ctx.font = \"14px Arial\";\r\n  ctx.fillStyle = \"#CCC\";\r\n  ctx.fillText(\"FPS: \" + fps, 10, 20);\r\n}\r\n","export default function ModeSelector(select, events) {\r\n  this.mode = \"normal\";\r\n  this.init = () => {\r\n    select.addEventListener(\"change\", () => {\r\n      this.mode = select.value;\r\n      if (select.value === 'nuts') {\r\n        events.push('go nuts');\r\n      }\r\n    })\r\n    select.value = 'normal';\r\n    \r\n  }\r\n}\r\n","const keyMap = {\r\n  37: \"left\",\r\n  38: \"rotateR\",\r\n  39: \"right\",\r\n  40: \"down\",\r\n\r\n  90: \"rotateL\",\r\n  88: \"rotateR\",\r\n  32: \"hardDrop\",\r\n\r\n  13: \"enter\",\r\n};\r\n\r\nconst input = {\r\n  init: (el, events) => {\r\n    el.addEventListener(\"keydown\", (event) => {\r\n      // console.log('event: ', event);\r\n      const value = keyMap[event.keyCode];\r\n      if (value) events.push([\"input\", value]);\r\n    });\r\n    el.querySelectorAll(\"button\").forEach((button) => {\r\n      button.addEventListener(\"touchstart\", (event) => {\r\n        events.push([\"input\", event.target.dataset.input]);\r\n      });\r\n    });\r\n  },\r\n};\r\n\r\nexport default input;\r\n","'use strict';\n\n/**\n * Randomize the order of the elements in a given array.\n * @param {Array} arr - The given array.\n * @param {Object} [options] - Optional configuration options.\n * @param {Boolean} [options.copy] - Sets if should return a shuffled copy of the given array. By default it's a falsy value.\n * @param {Function} [options.rng] - Specifies a custom random number generator.\n * @returns {Array}\n */\nfunction shuffle(arr, options) {\n\n  if (!Array.isArray(arr)) {\n    throw new Error('shuffle expect an array as parameter.');\n  }\n\n  options = options || {};\n\n  var collection = arr,\n      len = arr.length,\n      rng = options.rng || Math.random,\n      random,\n      temp;\n\n  if (options.copy === true) {\n    collection = arr.slice();\n  }\n\n  while (len) {\n    random = Math.floor(rng() * len);\n    len -= 1;\n    temp = collection[len];\n    collection[len] = collection[random];\n    collection[random] = temp;\n  }\n\n  return collection;\n};\n\n/**\n * Pick one or more random elements from the given array.\n * @param {Array} arr - The given array.\n * @param {Object} [options] - Optional configuration options.\n * @param {Number} [options.picks] - Specifies how many random elements you want to pick. By default it picks 1.\n * @param {Function} [options.rng] - Specifies a custom random number generator.\n * @returns {Object}\n */\nshuffle.pick = function(arr, options) {\n\n  if (!Array.isArray(arr)) {\n    throw new Error('shuffle.pick() expect an array as parameter.');\n  }\n\n  options = options || {};\n\n  var rng = options.rng || Math.random,\n      picks = options.picks || 1;\n\n  if (typeof picks === 'number' && picks !== 1) {\n    var len = arr.length,\n        collection = arr.slice(),\n        random = [],\n        index;\n\n    while (picks && len) {\n      index = Math.floor(rng() * len);\n      random.push(collection[index]);\n      collection.splice(index, 1);\n      len -= 1;\n      picks -= 1;\n    }\n\n    return random;\n  }\n\n  return arr[Math.floor(rng() * arr.length)];\n};\n\n/**\n * Expose\n */\nmodule.exports = shuffle;\n","const DEFAULT_OPTIONS = {\r\n  screenWidth: 640,\r\n  screenHeight: 480,\r\n  gridWidth: 32,\r\n  gridHeight: 20,\r\n  voidRadius: 16,\r\n  crustThickness: 16,\r\n};\r\n\r\nimport shuffle from \"shuffle-array\";\r\n\r\nconst queue = [];\r\n\r\nexport function getWrapX(GRID_WIDTH) {\r\n  return function wrapX(x) {\r\n    if (x >= GRID_WIDTH) return x % GRID_WIDTH;\r\n    if (x < 0) return wrapX(GRID_WIDTH + x);\r\n    return x;\r\n  };\r\n}\r\n\r\nexport function getPieceGridCoords(piece, grid) {\r\n  // console.log('grid: ', grid[0]);\r\n  const wrapX = getWrapX(grid[0].length);\r\n  let coords = [];\r\n\r\n  piece.shape.forEach((line, y) => {\r\n    line.forEach((block, x) => {\r\n      if (block) {\r\n        coords.push([x + piece.x, y + piece.y]);\r\n      }\r\n    });\r\n  });\r\n\r\n  coords = coords.map(([x, y]) => {\r\n    if (piece.angle === 0) return [wrapX(x), y];\r\n    let xTranslation = piece.x + piece.centre[0];\r\n    let yTranslation = piece.y + piece.centre[1];\r\n    let _x = x - xTranslation;\r\n    let _y = y - yTranslation;\r\n\r\n    if (piece.angle === 1) {\r\n      [_x, _y] = [_y, -_x];\r\n    } else if (piece.angle === 2) {\r\n      [_x, _y] = [-_x, -_y];\r\n    } else if (piece.angle === 3) {\r\n      [_x, _y] = [-_y, _x];\r\n    }\r\n\r\n    _x += xTranslation;\r\n    _y += yTranslation;\r\n    return [wrapX(_x), _y];\r\n  });\r\n\r\n  return coords;\r\n}\r\n\r\n// use getPieceGridCoords\r\nexport function doesCollide(piece, grid) {\r\n  const coords = getPieceGridCoords(piece, grid);\r\n  let collides;\r\n  coords.forEach(([x, y]) => {\r\n    if (y >= grid.length) collides = true;\r\n    if (grid[y] && grid[y][x]) {\r\n      collides = true;\r\n    }\r\n  });\r\n  return collides;\r\n}\r\n\r\nexport const pieces = {\r\n  i: {\r\n    shape: [[1, 1, 1, 1]],\r\n    centre: [1.5, 0.5],\r\n  },\r\n  t: {\r\n    shape: [\r\n      [0, 1],\r\n      [1, 1, 1],\r\n    ],\r\n    centre: [1, 1],\r\n  },\r\n  z: {\r\n    shape: [\r\n      [1, 1],\r\n      [0, 1, 1],\r\n    ],\r\n    centre: [1, 1],\r\n  },\r\n  s: {\r\n    shape: [\r\n      [0, 1, 1],\r\n      [1, 1],\r\n    ],\r\n    centre: [1, 1],\r\n  },\r\n  o: {\r\n    shape: [\r\n      [1, 1],\r\n      [1, 1],\r\n    ],\r\n    centre: [0.5, 0.5],\r\n  },\r\n  l: {\r\n    shape: [\r\n      [0, 0, 1],\r\n      [1, 1, 1],\r\n    ],\r\n    centre: [1, 1],\r\n  },\r\n  j: {\r\n    shape: [\r\n      [1, 0, 0],\r\n      [1, 1, 1],\r\n    ],\r\n    centre: [1, 1],\r\n  },\r\n};\r\n\r\nexport function spawn() {\r\n  const piece = {\r\n    x: 14,\r\n    y: 0,\r\n    type: getNext(),\r\n    angle: 0,\r\n  };\r\n  piece.shape = pieces[piece.type].shape;\r\n  piece.centre = pieces[piece.type].centre;\r\n  queue.shift();\r\n  return piece;\r\n}\r\n\r\nexport function getNext() {\r\n  if (queue.length === 0) {\r\n    let pieceTypes = Object.keys(pieces);\r\n    shuffle(pieceTypes);\r\n    queue.push(...pieceTypes);\r\n  }\r\n  return queue[0];\r\n}\r\n\r\nexport function removeLines(lines, grid) {\r\n  lines.reverse().forEach((y) => {\r\n    grid.splice(y, 1);\r\n  });\r\n  for (let i = 0; i < lines.length; i++) {\r\n    let newEmptyRow = new Array(32).fill(0);\r\n    grid.unshift(newEmptyRow);\r\n  }\r\n}\r\n","export const getCircleToGrid = ({\r\n  GRID_WIDTH,\r\n  GRID_HEIGHT,\r\n  VOID_RADIUS,\r\n  ACTIVE_RADIUS,\r\n}) =>\r\n  function getGridCoords(angle, radius) {\r\n    const gridX = Math.floor((angle / (2 * Math.PI)) * GRID_WIDTH);\r\n    const gridY = Math.floor(\r\n      ((radius - VOID_RADIUS) / ACTIVE_RADIUS) * GRID_HEIGHT\r\n    );\r\n    return [gridX, gridY];\r\n  };\r\n\r\nconst halfPi = Math.PI / 2;\r\n/**\r\n * Get angle from top, clockwise, positive\r\n * @param {number} x\r\n * @param {number} y\r\n */\r\nexport function getAngle(x, y) {\r\n  // reorient from top\r\n  let angle = Math.atan(y / x) + halfPi;\r\n  // flip around left-oriented angles\r\n  if (x < 0) angle += Math.PI;\r\n  return angle;\r\n}\r\n","/*!\n * Cross-Browser Split 1.1.1\n * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>\n * Available under the MIT License\n * ECMAScript compliant, uniform cross-browser split method\n */\n\n/**\n * Splits a string into an array of strings using a regex or string separator. Matches of the\n * separator are not included in the result array. However, if `separator` is a regex that contains\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n * cross-browser.\n * @param {String} str String to split.\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n * @example\n *\n * // Basic use\n * split('a b c d', ' ');\n * // -> ['a', 'b', 'c', 'd']\n *\n * // With limit\n * split('a b c d', ' ', 2);\n * // -> ['a', 'b']\n *\n * // Backreferences in result array\n * split('..word1 word2..', /([a-z]+)(\\d+)/i);\n * // -> ['..', 'word', '1', ' ', 'word', '2', '..']\n */\nmodule.exports = (function split(undef) {\n\n  var nativeSplit = String.prototype.split,\n    compliantExecNpcg = /()??/.exec(\"\")[1] === undef,\n    // NPCG: nonparticipating capturing group\n    self;\n\n  self = function(str, separator, limit) {\n    // If `separator` is not a regex, use `nativeSplit`\n    if (Object.prototype.toString.call(separator) !== \"[object RegExp]\") {\n      return nativeSplit.call(str, separator, limit);\n    }\n    var output = [],\n      flags = (separator.ignoreCase ? \"i\" : \"\") + (separator.multiline ? \"m\" : \"\") + (separator.extended ? \"x\" : \"\") + // Proposed for ES6\n      (separator.sticky ? \"y\" : \"\"),\n      // Firefox 3+\n      lastLastIndex = 0,\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      separator = new RegExp(separator.source, flags + \"g\"),\n      separator2, match, lastIndex, lastLength;\n    str += \"\"; // Type-convert\n    if (!compliantExecNpcg) {\n      // Doesn't need flags gy, but they don't hurt\n      separator2 = new RegExp(\"^\" + separator.source + \"$(?!\\\\s)\", flags);\n    }\n    /* Values for `limit`, per the spec:\n     * If undefined: 4294967295 // Math.pow(2, 32) - 1\n     * If 0, Infinity, or NaN: 0\n     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;\n     * If negative number: 4294967296 - Math.floor(Math.abs(limit))\n     * If other: Type-convert, then use the above rules\n     */\n    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1\n    limit >>> 0; // ToUint32(limit)\n    while (match = separator.exec(str)) {\n      // `separator.lastIndex` is not reliable cross-browser\n      lastIndex = match.index + match[0].length;\n      if (lastIndex > lastLastIndex) {\n        output.push(str.slice(lastLastIndex, match.index));\n        // Fix browsers whose `exec` methods don't consistently return `undefined` for\n        // nonparticipating capturing groups\n        if (!compliantExecNpcg && match.length > 1) {\n          match[0].replace(separator2, function() {\n            for (var i = 1; i < arguments.length - 2; i++) {\n              if (arguments[i] === undef) {\n                match[i] = undef;\n              }\n            }\n          });\n        }\n        if (match.length > 1 && match.index < str.length) {\n          Array.prototype.push.apply(output, match.slice(1));\n        }\n        lastLength = match[0].length;\n        lastLastIndex = lastIndex;\n        if (output.length >= limit) {\n          break;\n        }\n      }\n      if (separator.lastIndex === match.index) {\n        separator.lastIndex++; // Avoid an infinite loop\n      }\n    }\n    if (lastLastIndex === str.length) {\n      if (lastLength || !separator.test(\"\")) {\n        output.push(\"\");\n      }\n    } else {\n      output.push(str.slice(lastLastIndex));\n    }\n    return output.length > limit ? output.slice(0, limit) : output;\n  };\n\n  return self;\n})();\n","\nvar indexOf = [].indexOf;\n\nmodule.exports = function(arr, obj){\n  if (indexOf) return arr.indexOf(obj);\n  for (var i = 0; i < arr.length; ++i) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n};","// contains, add, remove, toggle\nvar indexof = require('indexof')\n\nmodule.exports = ClassList\n\nfunction ClassList(elem) {\n    var cl = elem.classList\n\n    if (cl) {\n        return cl\n    }\n\n    var classList = {\n        add: add\n        , remove: remove\n        , contains: contains\n        , toggle: toggle\n        , toString: $toString\n        , length: 0\n        , item: item\n    }\n\n    return classList\n\n    function add(token) {\n        var list = getTokens()\n        if (indexof(list, token) > -1) {\n            return\n        }\n        list.push(token)\n        setTokens(list)\n    }\n\n    function remove(token) {\n        var list = getTokens()\n            , index = indexof(list, token)\n\n        if (index === -1) {\n            return\n        }\n\n        list.splice(index, 1)\n        setTokens(list)\n    }\n\n    function contains(token) {\n        return indexof(getTokens(), token) > -1\n    }\n\n    function toggle(token) {\n        if (contains(token)) {\n            remove(token)\n            return false\n        } else {\n            add(token)\n            return true\n        }\n    }\n\n    function $toString() {\n        return elem.className\n    }\n\n    function item(index) {\n        var tokens = getTokens()\n        return tokens[index] || null\n    }\n\n    function getTokens() {\n        var className = elem.className\n\n        return filter(className.split(\" \"), isTruthy)\n    }\n\n    function setTokens(list) {\n        var length = list.length\n\n        elem.className = list.join(\" \")\n        classList.length = length\n\n        for (var i = 0; i < list.length; i++) {\n            classList[i] = list[i]\n        }\n\n        delete list[length]\n    }\n}\n\nfunction filter (arr, fn) {\n    var ret = []\n    for (var i = 0; i < arr.length; i++) {\n        if (fn(arr[i])) ret.push(arr[i])\n    }\n    return ret\n}\n\nfunction isTruthy(value) {\n    return !!value\n}\n","var split = require('browser-split')\nvar ClassList = require('class-list')\n\nvar w = typeof window === 'undefined' ? require('html-element') : window\nvar document = w.document\nvar Text = w.Text\n\nfunction context () {\n\n  var cleanupFuncs = []\n\n  function h() {\n    var args = [].slice.call(arguments), e = null\n    function item (l) {\n      var r\n      function parseClass (string) {\n        // Our minimal parser doesn’t understand escaping CSS special\n        // characters like `#`. Don’t use them. More reading:\n        // https://mathiasbynens.be/notes/css-escapes .\n\n        var m = split(string, /([\\.#]?[^\\s#.]+)/)\n        if(/^\\.|#/.test(m[1]))\n          e = document.createElement('div')\n        forEach(m, function (v) {\n          var s = v.substring(1,v.length)\n          if(!v) return\n          if(!e)\n            e = document.createElement(v)\n          else if (v[0] === '.')\n            ClassList(e).add(s)\n          else if (v[0] === '#')\n            e.setAttribute('id', s)\n        })\n      }\n\n      if(l == null)\n        ;\n      else if('string' === typeof l) {\n        if(!e)\n          parseClass(l)\n        else\n          e.appendChild(r = document.createTextNode(l))\n      }\n      else if('number' === typeof l\n        || 'boolean' === typeof l\n        || l instanceof Date\n        || l instanceof RegExp ) {\n          e.appendChild(r = document.createTextNode(l.toString()))\n      }\n      //there might be a better way to handle this...\n      else if (isArray(l))\n        forEach(l, item)\n      else if(isNode(l))\n        e.appendChild(r = l)\n      else if(l instanceof Text)\n        e.appendChild(r = l)\n      else if ('object' === typeof l) {\n        for (var k in l) {\n          if('function' === typeof l[k]) {\n            if(/^on\\w+/.test(k)) {\n              (function (k, l) { // capture k, l in the closure\n                if (e.addEventListener){\n                  e.addEventListener(k.substring(2), l[k], false)\n                  cleanupFuncs.push(function(){\n                    e.removeEventListener(k.substring(2), l[k], false)\n                  })\n                }else{\n                  e.attachEvent(k, l[k])\n                  cleanupFuncs.push(function(){\n                    e.detachEvent(k, l[k])\n                  })\n                }\n              })(k, l)\n            } else {\n              // observable\n              e[k] = l[k]()\n              cleanupFuncs.push(l[k](function (v) {\n                e[k] = v\n              }))\n            }\n          }\n          else if(k === 'style') {\n            if('string' === typeof l[k]) {\n              e.style.cssText = l[k]\n            }else{\n              for (var s in l[k]) (function(s, v) {\n                if('function' === typeof v) {\n                  // observable\n                  e.style.setProperty(s, v())\n                  cleanupFuncs.push(v(function (val) {\n                    e.style.setProperty(s, val)\n                  }))\n                } else\n                  var match = l[k][s].match(/(.*)\\W+!important\\W*$/);\n                  if (match) {\n                    e.style.setProperty(s, match[1], 'important')\n                  } else {\n                    e.style.setProperty(s, l[k][s])\n                  }\n              })(s, l[k][s])\n            }\n          } else if(k === 'attrs') {\n            for (var v in l[k]) {\n              e.setAttribute(v, l[k][v])\n            }\n          }\n          else if (k.substr(0, 5) === \"data-\") {\n            e.setAttribute(k, l[k])\n          } else {\n            e[k] = l[k]\n          }\n        }\n      } else if ('function' === typeof l) {\n        //assume it's an observable!\n        var v = l()\n        e.appendChild(r = isNode(v) ? v : document.createTextNode(v))\n\n        cleanupFuncs.push(l(function (v) {\n          if(isNode(v) && r.parentElement)\n            r.parentElement.replaceChild(v, r), r = v\n          else\n            r.textContent = v\n        }))\n      }\n\n      return r\n    }\n    while(args.length)\n      item(args.shift())\n\n    return e\n  }\n\n  h.cleanup = function () {\n    for (var i = 0; i < cleanupFuncs.length; i++){\n      cleanupFuncs[i]()\n    }\n    cleanupFuncs.length = 0\n  }\n\n  return h\n}\n\nvar h = module.exports = context()\nh.context = context\n\nfunction isNode (el) {\n  return el && el.nodeName && el.nodeType\n}\n\nfunction forEach (arr, fn) {\n  if (arr.forEach) return arr.forEach(fn)\n  for (var i = 0; i < arr.length; i++) fn(arr[i], i)\n}\n\nfunction isArray (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]'\n}\n\n\n","import { updateFps, renderFps } from \"./fps\";\r\nimport ModeSelector from \"./mode_selector\";\r\n// import memoize from \"lodash.memoize\";\r\nimport input from \"./input\";\r\nimport {\r\n  getWrapX,\r\n  getPieceGridCoords,\r\n  doesCollide,\r\n  spawn,\r\n  getNext,\r\n  removeLines,\r\n} from \"./game\";\r\nimport { getCircleToGrid, getAngle } from \"./geometry\";\r\nimport h from \"hyperscript\";\r\n\r\nconst SCREEN_WIDTH = 640;\r\nconst SCREEN_HEIGHT = 480;\r\nconst GRID_WIDTH = 32;\r\nconst GRID_HEIGHT = 14;\r\nconst VOID_RADIUS = 16;\r\nconst CRUST_THICKNESS = 16;\r\nconst SCREEN_CENTRE = [(SCREEN_WIDTH - 1) / 2, (SCREEN_HEIGHT - 1) / 2];\r\nconst ACTIVE_RADIUS = SCREEN_HEIGHT / 2 - (VOID_RADIUS + CRUST_THICKNESS);\r\n\r\nlet circleRadius = SCREEN_HEIGHT - 1 * CRUST_THICKNESS;\r\nconst circle = {\r\n  x: (SCREEN_WIDTH - circleRadius) / 2,\r\n  y: CRUST_THICKNESS,\r\n  bottom: SCREEN_HEIGHT - CRUST_THICKNESS,\r\n  w: (SCREEN_WIDTH - circleRadius) / 2 + circleRadius,\r\n};\r\nlet ctx;\r\nconst events = [];\r\n\r\nconst modeSelector = {};\r\n\r\nlet clearing = null;\r\n\r\nlet piece = null;\r\n\r\nlet mainMenu = true;\r\n\r\nconst wrapX = getWrapX(GRID_WIDTH);\r\n\r\nconst grid = new Array(GRID_HEIGHT).fill(null).map(() => {\r\n  return new Array(GRID_WIDTH).fill(0);\r\n});\r\nlet grid2;\r\n\r\nfunction clearGrid() {\r\n  grid.forEach(row => {\r\n    row.fill(0);\r\n  });\r\n}\r\n\r\nfunction gridLookup(x, y) {\r\n  return grid[y] && grid[y][x];\r\n}\r\n// let lookup = memoize(gridLookup, (x, y) => `${x},${y}`);\r\n\r\nconst getGridCoords = getCircleToGrid({\r\n  GRID_WIDTH,\r\n  GRID_HEIGHT,\r\n  VOID_RADIUS,\r\n  ACTIVE_RADIUS,\r\n});\r\n\r\nfunction renderGrid(grid) {\r\n  ctx.fillStyle = \"rgba(0, 0, 0, 1)\";\r\n  ctx.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\r\n  let pixelHeight = 2;\r\n\r\n  let hue = 0;\r\n  if (modeSelector.mode === \"colour\") {\r\n    hue = (dotX / GRID_WIDTH) * 360;\r\n    ctx.fillStyle = `hsla(${hue}deg, 100%, 80%, 1.0)`;\r\n  } else if (modeSelector.mode === \"nuts\") {\r\n    hue = (dotX / (GRID_WIDTH / 20)) * 360;\r\n    ctx.fillStyle = `hsla(${hue}deg, 100%, 80%, 1.0)`;\r\n  } else if (modeSelector.mode === \"vcr\") {\r\n    ctx.fillStyle = `rgb(10,250,100)`;\r\n    pixelHeight = 1;\r\n  } else {\r\n    ctx.fillStyle = `rgb(200,200,200)`;\r\n  }\r\n\r\n  const xCentre = SCREEN_CENTRE[0];\r\n  const yCentre = SCREEN_CENTRE[1];\r\n\r\n  // for each pixel\r\n  for (let y = circle.y; y < circle.bottom; y += 2) {\r\n    for (let x = circle.x; x < circle.w; x += 2) {\r\n      const dx = x - xCentre;\r\n      const dy = y - yCentre;\r\n\r\n      const radius = Math.sqrt(dx ** 2 + dy ** 2);\r\n      const angle = getAngle(dx, dy);\r\n\r\n      const [gridX, gridY] = getGridCoords(angle, radius);\r\n\r\n      let fuzz = 0;\r\n      if (modeSelector.mode === \"fuzzy\") {\r\n        fuzz = Math.random() * 3 - 1.5;\r\n      } else if (modeSelector.mode === \"nuts\") {\r\n        fuzz = Math.random() * 6 - 3;\r\n      }\r\n      if (shock) fuzz = Math.random() * shock - shock / 2;\r\n\r\n      // if (gridLookup(gridX, gridY)) {\r\n      // if (lookup(gridX, gridY)) {\r\n      if (grid[gridY] && grid[gridY][gridX]) {\r\n        const activePiece = grid[gridY][gridX] === 2;\r\n        const clearingRow = grid[gridY][gridX] === 3;\r\n        if (modeSelector.mode === \"colour\" || modeSelector.mode === \"nuts\") {\r\n          let hue2 = (hue + (angle / (2 * Math.PI)) * 360) % 360;\r\n          ctx.fillStyle = `hsla(${hue2}deg, 100%, 80%, 1.0)`;\r\n        } else {\r\n          if (activePiece) {\r\n            ctx.fillStyle = `rgb(255,100,50)`;\r\n          } else if (clearingRow) {\r\n            fuzz = Math.random() * 3 - 1.5;\r\n            let hue2 = (hue + (angle / (2 * Math.PI)) * 360) % 360;\r\n            ctx.fillStyle = `hsla(${hue2}deg, 100%, 80%, 1.0)`;\r\n          } else {\r\n            ctx.fillStyle = `rgb(200,200,200)`;\r\n          }\r\n        }\r\n        ctx.fillRect(x, y, 2 + fuzz, pixelHeight + fuzz);\r\n      }\r\n    }\r\n  }\r\n  // lookup.cache.clear();\r\n}\r\n\r\nfunction getClickHandler() {\r\n  return function handleClick(e) {\r\n    const startedAt = timestamp();\r\n    var rect = e.target.getBoundingClientRect();\r\n    var x = e.clientX - rect.left; //x position within the element.\r\n    var y = e.clientY - rect.top; //y position within the element.\r\n\r\n    var scale = SCREEN_WIDTH / rect.width;\r\n\r\n    x = x * scale;\r\n    y = y * scale;\r\n\r\n    const dx = x - SCREEN_CENTRE[0];\r\n    const dy = y - SCREEN_CENTRE[1];\r\n\r\n    const radius = Math.sqrt(dx ** 2 + dy ** 2);\r\n    const angle = getAngle(dx, dy);\r\n\r\n    const [gridX, gridY] = getGridCoords(angle, radius);\r\n    grid[gridY] && (grid[gridY][gridX] = 1);\r\n  };\r\n}\r\n\r\nfunction lockPieceIn() {\r\n  getPieceGridCoords(piece, grid).forEach(([x, y]) => {\r\n    if (grid[y]) grid[y][x] = 1;\r\n  });\r\n  piece = null;\r\n}\r\n\r\nlet shock = 0;\r\nlet shockDecay = 0.1;\r\n\r\nfunction processEvent(event) {\r\n  // console.log(event);\r\n  if (event === \"go nuts\") {\r\n    shock = 50;\r\n  } else if (event[0] === \"input\") {\r\n    if (event[1] === \"enter\") {\r\n      if (mainMenu) {\r\n        clearGrid();\r\n        mainMenu = false;\r\n        const menuEl = document.querySelector('.main-menu');\r\n        menuEl.parentElement.removeChild(menuEl);\r\n        return;\r\n      }\r\n    }\r\n    if (piece && !mainMenu) {\r\n      switch (event[1]) {\r\n        case \"left\":\r\n          if (doesCollide({ ...piece, x: wrapX(piece.x + 1) }, grid)) {\r\n            // clunk\r\n          } else {\r\n            piece.x = wrapX(piece.x + 1);\r\n          }\r\n          break;\r\n        case \"right\":\r\n          if (doesCollide({ ...piece, x: wrapX(piece.x - 1) }, grid)) {\r\n            // clonk\r\n          } else {\r\n            piece.x = wrapX(piece.x - 1);\r\n          }\r\n          break;\r\n        case \"down\":\r\n          if (doesCollide({ ...piece, y: piece.y + 1 }, grid)) {\r\n            lockPieceIn();\r\n          } else {\r\n            piece.y += 1;\r\n          }\r\n          break;\r\n        case \"rotateR\":\r\n          piece.angle = (piece.angle + 1) % 4;\r\n          break;\r\n        case \"rotateL\":\r\n          piece.angle = piece.angle - 1;\r\n          if (piece.angle < 0) piece.angle = 3;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  } else if (event[0] === \"clear\") {\r\n  }\r\n  // console.log(piece);\r\n  // console.log(piece && getPieceGridCoords(piece, grid));\r\n}\r\n\r\nlet start;\r\nlet dotX = 0;\r\nconst speed = 2 / 30 / 32;\r\nlet fps;\r\n\r\nfunction update(t) {\r\n  while (events.length) {\r\n    let event = events.shift();\r\n    processEvent(event);\r\n  }\r\n  fps = updateFps(t) || fps;\r\n  dotX = wrapX(dotX + speed * t);\r\n\r\n  shock = Math.max(0, shock - shockDecay * t);\r\n\r\n  grid2 = grid.map((line) => line.slice());\r\n  \r\n  if (piece) {\r\n    const pieceCoords = getPieceGridCoords(piece, grid);\r\n    pieceCoords.forEach(([x, y]) => {\r\n      if (y < 0) return;\r\n      if (grid2[y]) grid2[y][x] = 2;\r\n    });\r\n  } else if (clearing) {\r\n    // animating\r\n    if (timestamp() - clearing.at >= 500) {\r\n      removeLines(clearing.lines, grid);\r\n      grid2 = grid;\r\n      clearing = null;\r\n    }\r\n  } else {\r\n    const completeLines = [];\r\n    grid2.forEach((line, y) => {\r\n      if (line.find((block) => block === 0) === undefined) {\r\n        completeLines.push(y);\r\n        grid[y].fill(3);\r\n      }\r\n    });\r\n    if (completeLines.length) {\r\n      clearing = {\r\n        lines: completeLines,\r\n        at: timestamp(),\r\n      };\r\n    } else if (!mainMenu) {\r\n      piece = spawn();\r\n      if (doesCollide(piece, grid)) {\r\n        // high score?\r\n        piece = null;\r\n        showMainMenu();\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction showMainMenu() {\r\n  mainMenu = true;\r\n  const menuScreen = h(\"div.main-menu\", [\r\n    h(\"div\", [h(\"h1\", \"Orbital\"), h(\"h2\", \"Radial Matrix\")]),\r\n    h(\"nav\", h(\"div\", \"Hit Enter/Tap to start\")),\r\n  ]);\r\n  document.querySelector(\"body\").appendChild(menuScreen);\r\n}\r\n\r\nfunction render() {\r\n  renderGrid(grid2);\r\n  // renderFps(ctx, fps);\r\n}\r\n\r\nfunction timestamp() {\r\n  return window.performance && window.performance.now\r\n    ? window.performance.now()\r\n    : Date.now();\r\n}\r\n\r\nlet last = timestamp();\r\n\r\nfunction step() {\r\n  let now = timestamp();\r\n  if (start === undefined) start = now;\r\n  const elapsed = now - start;\r\n  let dt = Math.min(1000, now - last);\r\n  update(dt);\r\n  render();\r\n  last = now;\r\n  window.requestAnimationFrame(step);\r\n}\r\n\r\nwindow.requestAnimationFrame(step);\r\n\r\nfunction init() {\r\n  view.setAttribute(\"width\", SCREEN_WIDTH);\r\n  view.setAttribute(\"height\", SCREEN_HEIGHT);\r\n  ctx = view.getContext(\"2d\");\r\n  // modeSelector.init();\r\n  input.init(document, events);\r\n  view.addEventListener(\"click\", getClickHandler());\r\n  document.addEventListener(\"click\", () => events.push([\"input\", \"enter\"]));\r\n\r\n  piece = spawn();\r\n  console.log(getNext());\r\n  showMainMenu();\r\n  window.requestAnimationFrame(step);\r\n}\r\n\r\ninit();\r\n"]}