{"version":3,"sources":["fps.js","mode_selector.js","input.js","game_data.js","../node_modules/shuffle-array/index.js","../node_modules/color-name/index.js","../node_modules/simple-swizzle/node_modules/is-arrayish/index.js","../node_modules/simple-swizzle/index.js","../node_modules/color-string/index.js","../node_modules/color-convert/conversions.js","../node_modules/color-convert/route.js","../node_modules/color-convert/index.js","../node_modules/color/index.js","game.js","geometry.js","../node_modules/browser-split/index.js","../node_modules/indexof/index.js","../node_modules/class-list/index.js","../node_modules/hyperscript/index.js","util.js","plant.js","app.js"],"names":["fpsUpdateDelay","updateFps","t","Math","round","renderFps","ctx","fps","fillStyle","fillRect","font","fillText","ModeSelector","select","events","mode","init","addEventListener","value","push","input","keyMap","el","event","keyCode","querySelectorAll","forEach","button","target","dataset","seeds","name","colour","pieces","i","shape","centre","z","s","o","l","j","I_WALLKICK_DATA","OTHER_WALLKICK_DATA","Color","require","DEFAULT_OPTIONS","screenWidth","screenHeight","gridWidth","gridHeight","voidRadius","crustThickness","queue","getWrapX","GRID_WIDTH","wrapX","x","getPieceGridCoords","piece","grid","length","coords","line","y","block","map","angle","xTranslation","yTranslation","_x","_y","doesCollide","collides","spawn","next","getNext","shift","type","console","log","falling","fallNext","pieceTypes","Object","keys","removeLines","lines","reverse","splice","newEmptyRow","Array","fill","unshift","calculatePoints","etc","start","score","level","addScore","points","awardPoints","linesCleared","tryRotate","sequence","rotatedFrom","d","shiftedPiece","getColour","opts","archetype","dim","dimmed","pKey","p","desaturate","string","getCircleToGrid","GRID_HEIGHT","VOID_RADIUS","ACTIVE_RADIUS","radius","floor","PI","halfPi","getAngle","atan","timestamp","window","performance","now","Date","Plant","seed","data","age","b","leaves","growth","life","grow","delta","leaf","mLeaf","moveLeaf","finished","initLeaf","grid2","SCREEN_WIDTH","SCREEN_HEIGHT","CRUST_THICKNESS","SCREEN_CENTRE","circleRadius","circle","bottom","w","modeSelector","clearing","mainMenu","plant","clearGrid","row","gridLookup","getGridCoords","renderGrid","pixelHeight","hue","dotX","xCentre","yCentre","dx","dy","sqrt","gridX","gridY","fuzz","random","shock","cell","hasShape","clearingRow","hue2","getClickHandler","e","startedAt","rect","getBoundingClientRect","clientX","left","clientY","top","scale","width","lockPieceIn","newGame","menuEl","document","querySelector","parentElement","removeChild","startTime","shockDecay","processEvent","rotation","speed","fallingSpeed","update","max","slice","pieceRotated","rotateAttempt","at","completeLines","undefined","find","pointsAwarded","lastPiece","showMainMenu","lastScore","message","menuScreen","appendChild","render","last","step","min","requestAnimationFrame","view","setAttribute","getContext"],"mappings":"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","file":"app.18826eeb.js","sourceRoot":"..\\src","sourcesContent":["let fpsUpdateDelay = 0;\r\n\r\nexport function updateFps(t) {\r\n  fpsUpdateDelay += t;\r\n  if (fpsUpdateDelay > 1000) {\r\n    fpsUpdateDelay = 0;\r\n    return Math.round(1 / (t / 1000));\r\n  }\r\n}\r\n\r\n\r\nexport function renderFps(ctx, fps) {\r\n  // Draw number to the screen\r\n  ctx.fillStyle = \"#333\";\r\n  ctx.fillRect(0, 0, 80, 32);\r\n  ctx.font = \"14px Arial\";\r\n  ctx.fillStyle = \"#CCC\";\r\n  ctx.fillText(\"FPS: \" + fps, 10, 20);\r\n}\r\n","export default function ModeSelector(select, events) {\r\n  this.mode = \"normal\";\r\n  this.init = () => {\r\n    select.addEventListener(\"change\", () => {\r\n      this.mode = select.value;\r\n      if (select.value === 'nuts') {\r\n        events.push('go nuts');\r\n      }\r\n    })\r\n    select.value = 'normal';\r\n    \r\n  }\r\n}\r\n","const keyMap = {\r\n  37: \"left\",\r\n  38: \"rotateR\",\r\n  39: \"right\",\r\n  40: \"down\",\r\n\r\n  90: \"rotateL\",\r\n  88: \"rotateR\",\r\n  32: \"hardDrop\",\r\n\r\n  13: \"enter\",\r\n};\r\n\r\nconst input = {\r\n  init: (el, events) => {\r\n    el.addEventListener(\"keydown\", (event) => {\r\n      // console.log('event: ', event);\r\n      const value = keyMap[event.keyCode];\r\n      if (value) events.push([\"input\", value]);\r\n    });\r\n    el.querySelectorAll(\"button\").forEach((button) => {\r\n      button.addEventListener(\"touchstart\", (event) => {\r\n        events.push([\"input\", event.target.dataset.input]);\r\n      });\r\n    });\r\n  },\r\n};\r\n\r\nexport default input;\r\n","const seeds = [\r\n  {\r\n    name: \"swamp\",\r\n    colour: \"#7d8c3a\",\r\n  },\r\n  {\r\n    name: \"castle\",\r\n    colour: \"#5742b7\"\r\n  }\r\n];\r\n\r\nconst pieces = {\r\n  i: {\r\n    shape: [[1, 1, 1, 1]],\r\n    centre: [1.5, 0.5],\r\n    colour: \"#7FDBFF\",\r\n  },\r\n  t: {\r\n    shape: [\r\n      [0, 1],\r\n      [1, 1, 1],\r\n    ],\r\n    centre: [1, 1],\r\n    colour: \"#5742b7\",\r\n  },\r\n  z: {\r\n    shape: [\r\n      [1, 1],\r\n      [0, 1, 1],\r\n    ],\r\n    centre: [1, 1],\r\n    colour: \"#FF4136\"\r\n  },\r\n  s: {\r\n    shape: [\r\n      [0, 1, 1],\r\n      [1, 1],\r\n    ],\r\n    centre: [1, 1],\r\n    colour: \"#2ECC40\"\r\n  },\r\n  o: {\r\n    shape: [\r\n      [1, 1],\r\n      [1, 1],\r\n    ],\r\n    centre: [0.5, 0.5],\r\n    colour: \"#FFDC00\"\r\n  },\r\n  l: {\r\n    shape: [\r\n      [0, 0, 1],\r\n      [1, 1, 1],\r\n    ],\r\n    centre: [1, 1],\r\n    colour: \"#0074D9\"\r\n  },\r\n  j: {\r\n    shape: [\r\n      [1, 0, 0],\r\n      [1, 1, 1],\r\n    ],\r\n    centre: [1, 1],\r\n    colour: \"#FF851B\"\r\n  },\r\n};\r\n\r\n// Data source: https://tetris.fandom.com/wiki/SRS\r\n// \"Super Rotation System\"\r\n\r\nconst I_WALLKICK_DATA = {\r\n  \"01\": [\r\n    [0, 0],\r\n    [-2, 0],\r\n    [1, 0],\r\n    [-2, -1],\r\n    [1, 2],\r\n  ],\r\n  10: [\r\n    [0, 0],\r\n    [2, 0],\r\n    [-1, 0],\r\n    [2, 1],\r\n    [-1, -2],\r\n  ],\r\n  12: [\r\n    [0, 0],\r\n    [-1, 0],\r\n    [2, 0],\r\n    [-1, 2],\r\n    [2, -1],\r\n  ],\r\n  21: [\r\n    [0, 0],\r\n    [1, 0],\r\n    [-2, 0],\r\n    [1, -2],\r\n    [-2, 1],\r\n  ],\r\n  23: [\r\n    [0, 0],\r\n    [2, 0],\r\n    [-1, 0],\r\n    [2, 1],\r\n    [-1, -2],\r\n  ],\r\n  32: [\r\n    [0, 0],\r\n    [-2, 0],\r\n    [1, 0],\r\n    [-2, -1],\r\n    [1, 2],\r\n  ],\r\n  30: [\r\n    [0, 0],\r\n    [1, 0],\r\n    [-2, 0],\r\n    [1, -2],\r\n    [-2, 1],\r\n  ],\r\n  \"03\": [\r\n    [0, 0],\r\n    [-1, 0],\r\n    [2, 0],\r\n    [-1, 2],\r\n    [2, -1],\r\n  ],\r\n};\r\n\r\nconst OTHER_WALLKICK_DATA = {\r\n  \"01\": [\r\n    [0, 0],\r\n    [-1, 0],\r\n    [-1, 1],\r\n    [0, -2],\r\n    [-1, -2],\r\n  ],\r\n  10: [\r\n    [0, 0],\r\n    [1, 0],\r\n    [1, -1],\r\n    [0, 2],\r\n    [1, 2],\r\n  ],\r\n  12: [\r\n    [0, 0],\r\n    [1, 0],\r\n    [1, -1],\r\n    [0, 2],\r\n    [1, 2],\r\n  ],\r\n  21: [\r\n    [0, 0],\r\n    [-1, 0],\r\n    [-1, 1],\r\n    [0, -2],\r\n    [-1, -2],\r\n  ],\r\n  23: [\r\n    [0, 0],\r\n    [1, 0],\r\n    [1, 1],\r\n    [0, -2],\r\n    [1, -2],\r\n  ],\r\n  32: [\r\n    [0, 0],\r\n    [-1, 0],\r\n    [-1, -1],\r\n    [0, 2],\r\n    [-1, 2],\r\n  ],\r\n  30: [\r\n    [0, 0],\r\n    [-1, 0],\r\n    [-1, -1],\r\n    [0, 2],\r\n    [-1, 2],\r\n  ],\r\n  \"03\": [\r\n    [0, 0],\r\n    [1, 0],\r\n    [1, 1],\r\n    [0, -2],\r\n    [1, -2],\r\n  ],\r\n};\r\n\r\nexport { pieces, seeds, OTHER_WALLKICK_DATA, I_WALLKICK_DATA };\r\n","'use strict';\n\n/**\n * Randomize the order of the elements in a given array.\n * @param {Array} arr - The given array.\n * @param {Object} [options] - Optional configuration options.\n * @param {Boolean} [options.copy] - Sets if should return a shuffled copy of the given array. By default it's a falsy value.\n * @param {Function} [options.rng] - Specifies a custom random number generator.\n * @returns {Array}\n */\nfunction shuffle(arr, options) {\n\n  if (!Array.isArray(arr)) {\n    throw new Error('shuffle expect an array as parameter.');\n  }\n\n  options = options || {};\n\n  var collection = arr,\n      len = arr.length,\n      rng = options.rng || Math.random,\n      random,\n      temp;\n\n  if (options.copy === true) {\n    collection = arr.slice();\n  }\n\n  while (len) {\n    random = Math.floor(rng() * len);\n    len -= 1;\n    temp = collection[len];\n    collection[len] = collection[random];\n    collection[random] = temp;\n  }\n\n  return collection;\n};\n\n/**\n * Pick one or more random elements from the given array.\n * @param {Array} arr - The given array.\n * @param {Object} [options] - Optional configuration options.\n * @param {Number} [options.picks] - Specifies how many random elements you want to pick. By default it picks 1.\n * @param {Function} [options.rng] - Specifies a custom random number generator.\n * @returns {Object}\n */\nshuffle.pick = function(arr, options) {\n\n  if (!Array.isArray(arr)) {\n    throw new Error('shuffle.pick() expect an array as parameter.');\n  }\n\n  options = options || {};\n\n  var rng = options.rng || Math.random,\n      picks = options.picks || 1;\n\n  if (typeof picks === 'number' && picks !== 1) {\n    var len = arr.length,\n        collection = arr.slice(),\n        random = [],\n        index;\n\n    while (picks && len) {\n      index = Math.floor(rng() * len);\n      random.push(collection[index]);\n      collection.splice(index, 1);\n      len -= 1;\n      picks -= 1;\n    }\n\n    return random;\n  }\n\n  return arr[Math.floor(rng() * arr.length)];\n};\n\n/**\n * Expose\n */\nmodule.exports = shuffle;\n","'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n","module.exports = function isArrayish(obj) {\n\tif (!obj || typeof obj === 'string') {\n\t\treturn false;\n\t}\n\n\treturn obj instanceof Array || Array.isArray(obj) ||\n\t\t(obj.length >= 0 && (obj.splice instanceof Function ||\n\t\t\t(Object.getOwnPropertyDescriptor(obj, (obj.length - 1)) && obj.constructor.name !== 'String')));\n};\n","'use strict';\n\nvar isArrayish = require('is-arrayish');\n\nvar concat = Array.prototype.concat;\nvar slice = Array.prototype.slice;\n\nvar swizzle = module.exports = function swizzle(args) {\n\tvar results = [];\n\n\tfor (var i = 0, len = args.length; i < len; i++) {\n\t\tvar arg = args[i];\n\n\t\tif (isArrayish(arg)) {\n\t\t\t// http://jsperf.com/javascript-array-concat-vs-push/98\n\t\t\tresults = concat.call(results, slice.call(arg));\n\t\t} else {\n\t\t\tresults.push(arg);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nswizzle.wrap = function (fn) {\n\treturn function () {\n\t\treturn fn(swizzle(arguments));\n\t};\n};\n","/* MIT license */\nvar colorNames = require('color-name');\nvar swizzle = require('simple-swizzle');\n\nvar reverseNames = {};\n\n// create a list of reverse color names\nfor (var name in colorNames) {\n\tif (colorNames.hasOwnProperty(name)) {\n\t\treverseNames[colorNames[name]] = name;\n\t}\n}\n\nvar cs = module.exports = {\n\tto: {},\n\tget: {}\n};\n\ncs.get = function (string) {\n\tvar prefix = string.substring(0, 3).toLowerCase();\n\tvar val;\n\tvar model;\n\tswitch (prefix) {\n\t\tcase 'hsl':\n\t\t\tval = cs.get.hsl(string);\n\t\t\tmodel = 'hsl';\n\t\t\tbreak;\n\t\tcase 'hwb':\n\t\t\tval = cs.get.hwb(string);\n\t\t\tmodel = 'hwb';\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tval = cs.get.rgb(string);\n\t\t\tmodel = 'rgb';\n\t\t\tbreak;\n\t}\n\n\tif (!val) {\n\t\treturn null;\n\t}\n\n\treturn {model: model, value: val};\n};\n\ncs.get.rgb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar abbr = /^#([a-f0-9]{3,4})$/i;\n\tvar hex = /^#([a-f0-9]{6})([a-f0-9]{2})?$/i;\n\tvar rgba = /^rgba?\\(\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*,\\s*([+-]?\\d+)\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar per = /^rgba?\\(\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*,\\s*([+-]?[\\d\\.]+)\\%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar keyword = /(\\D+)/;\n\n\tvar rgb = [0, 0, 0, 1];\n\tvar match;\n\tvar i;\n\tvar hexAlpha;\n\n\tif (match = string.match(hex)) {\n\t\thexAlpha = match[2];\n\t\tmatch = match[1];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\t// https://jsperf.com/slice-vs-substr-vs-substring-methods-long-string/19\n\t\t\tvar i2 = i * 2;\n\t\t\trgb[i] = parseInt(match.slice(i2, i2 + 2), 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(abbr)) {\n\t\tmatch = match[1];\n\t\thexAlpha = match[3];\n\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i] + match[i], 16);\n\t\t}\n\n\t\tif (hexAlpha) {\n\t\t\trgb[3] = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;\n\t\t}\n\t} else if (match = string.match(rgba)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = parseInt(match[i + 1], 0);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(per)) {\n\t\tfor (i = 0; i < 3; i++) {\n\t\t\trgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);\n\t\t}\n\n\t\tif (match[4]) {\n\t\t\trgb[3] = parseFloat(match[4]);\n\t\t}\n\t} else if (match = string.match(keyword)) {\n\t\tif (match[1] === 'transparent') {\n\t\t\treturn [0, 0, 0, 0];\n\t\t}\n\n\t\trgb = colorNames[match[1]];\n\n\t\tif (!rgb) {\n\t\t\treturn null;\n\t\t}\n\n\t\trgb[3] = 1;\n\n\t\treturn rgb;\n\t} else {\n\t\treturn null;\n\t}\n\n\tfor (i = 0; i < 3; i++) {\n\t\trgb[i] = clamp(rgb[i], 0, 255);\n\t}\n\trgb[3] = clamp(rgb[3], 0, 1);\n\n\treturn rgb;\n};\n\ncs.get.hsl = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hsl = /^hsla?\\(\\s*([+-]?(?:\\d*\\.)?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hsl);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = (parseFloat(match[1]) + 360) % 360;\n\t\tvar s = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar l = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\n\t\treturn [h, s, l, a];\n\t}\n\n\treturn null;\n};\n\ncs.get.hwb = function (string) {\n\tif (!string) {\n\t\treturn null;\n\t}\n\n\tvar hwb = /^hwb\\(\\s*([+-]?\\d*[\\.]?\\d+)(?:deg)?\\s*,\\s*([+-]?[\\d\\.]+)%\\s*,\\s*([+-]?[\\d\\.]+)%\\s*(?:,\\s*([+-]?[\\d\\.]+)\\s*)?\\)$/;\n\tvar match = string.match(hwb);\n\n\tif (match) {\n\t\tvar alpha = parseFloat(match[4]);\n\t\tvar h = ((parseFloat(match[1]) % 360) + 360) % 360;\n\t\tvar w = clamp(parseFloat(match[2]), 0, 100);\n\t\tvar b = clamp(parseFloat(match[3]), 0, 100);\n\t\tvar a = clamp(isNaN(alpha) ? 1 : alpha, 0, 1);\n\t\treturn [h, w, b, a];\n\t}\n\n\treturn null;\n};\n\ncs.to.hex = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn (\n\t\t'#' +\n\t\thexDouble(rgba[0]) +\n\t\thexDouble(rgba[1]) +\n\t\thexDouble(rgba[2]) +\n\t\t(rgba[3] < 1\n\t\t\t? (hexDouble(Math.round(rgba[3] * 255)))\n\t\t\t: '')\n\t);\n};\n\ncs.to.rgb = function () {\n\tvar rgba = swizzle(arguments);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ')'\n\t\t: 'rgba(' + Math.round(rgba[0]) + ', ' + Math.round(rgba[1]) + ', ' + Math.round(rgba[2]) + ', ' + rgba[3] + ')';\n};\n\ncs.to.rgb.percent = function () {\n\tvar rgba = swizzle(arguments);\n\n\tvar r = Math.round(rgba[0] / 255 * 100);\n\tvar g = Math.round(rgba[1] / 255 * 100);\n\tvar b = Math.round(rgba[2] / 255 * 100);\n\n\treturn rgba.length < 4 || rgba[3] === 1\n\t\t? 'rgb(' + r + '%, ' + g + '%, ' + b + '%)'\n\t\t: 'rgba(' + r + '%, ' + g + '%, ' + b + '%, ' + rgba[3] + ')';\n};\n\ncs.to.hsl = function () {\n\tvar hsla = swizzle(arguments);\n\treturn hsla.length < 4 || hsla[3] === 1\n\t\t? 'hsl(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%)'\n\t\t: 'hsla(' + hsla[0] + ', ' + hsla[1] + '%, ' + hsla[2] + '%, ' + hsla[3] + ')';\n};\n\n// hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax\n// (hwb have alpha optional & 1 is default value)\ncs.to.hwb = function () {\n\tvar hwba = swizzle(arguments);\n\n\tvar a = '';\n\tif (hwba.length >= 4 && hwba[3] !== 1) {\n\t\ta = ', ' + hwba[3];\n\t}\n\n\treturn 'hwb(' + hwba[0] + ', ' + hwba[1] + '%, ' + hwba[2] + '%' + a + ')';\n};\n\ncs.to.keyword = function (rgb) {\n\treturn reverseNames[rgb.slice(0, 3)];\n};\n\n// helpers\nfunction clamp(num, min, max) {\n\treturn Math.min(Math.max(min, num), max);\n}\n\nfunction hexDouble(num) {\n\tvar str = num.toString(16).toUpperCase();\n\treturn (str.length < 2) ? '0' + str : str;\n}\n","/* MIT license */\nvar cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nvar reverseKeywords = {};\nfor (var key in cssKeywords) {\n\tif (cssKeywords.hasOwnProperty(key)) {\n\t\treverseKeywords[cssKeywords[key]] = key;\n\t}\n}\n\nvar convert = module.exports = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\n// hide .channels and .labels properties\nfor (var model in convert) {\n\tif (convert.hasOwnProperty(model)) {\n\t\tif (!('channels' in convert[model])) {\n\t\t\tthrow new Error('missing channels property: ' + model);\n\t\t}\n\n\t\tif (!('labels' in convert[model])) {\n\t\t\tthrow new Error('missing channel labels property: ' + model);\n\t\t}\n\n\t\tif (convert[model].labels.length !== convert[model].channels) {\n\t\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t\t}\n\n\t\tvar channels = convert[model].channels;\n\t\tvar labels = convert[model].labels;\n\t\tdelete convert[model].channels;\n\t\tdelete convert[model].labels;\n\t\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\t\tObject.defineProperty(convert[model], 'labels', {value: labels});\n\t}\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar min = Math.min(r, g, b);\n\tvar max = Math.max(r, g, b);\n\tvar delta = max - min;\n\tvar h;\n\tvar s;\n\tvar l;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tl = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tvar rdif;\n\tvar gdif;\n\tvar bdif;\n\tvar h;\n\tvar s;\n\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar v = Math.max(r, g, b);\n\tvar diff = v - Math.min(r, g, b);\n\tvar diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = s = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tvar r = rgb[0];\n\tvar g = rgb[1];\n\tvar b = rgb[2];\n\tvar h = convert.rgb.hsl(rgb)[0];\n\tvar w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar c;\n\tvar m;\n\tvar y;\n\tvar k;\n\n\tk = Math.min(1 - r, 1 - g, 1 - b);\n\tc = (1 - r - k) / (1 - k) || 0;\n\tm = (1 - g - k) / (1 - k) || 0;\n\ty = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\n/**\n * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n * */\nfunction comparativeDistance(x, y) {\n\treturn (\n\t\tMath.pow(x[0] - y[0], 2) +\n\t\tMath.pow(x[1] - y[1], 2) +\n\t\tMath.pow(x[2] - y[2], 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tvar reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tvar currentClosestDistance = Infinity;\n\tvar currentClosestKeyword;\n\n\tfor (var keyword in cssKeywords) {\n\t\tif (cssKeywords.hasOwnProperty(keyword)) {\n\t\t\tvar value = cssKeywords[keyword];\n\n\t\t\t// Compute comparative distance\n\t\t\tvar distance = comparativeDistance(rgb, value);\n\n\t\t\t// Check if its less, if so set as closest\n\t\t\tif (distance < currentClosestDistance) {\n\t\t\t\tcurrentClosestDistance = distance;\n\t\t\t\tcurrentClosestKeyword = keyword;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\n\t// assume sRGB\n\tr = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);\n\n\tvar x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tvar y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tvar z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tvar xyz = convert.rgb.xyz(rgb);\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tvar h = hsl[0] / 360;\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar t1;\n\tvar t2;\n\tvar t3;\n\tvar rgb;\n\tvar val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tt1 = 2 * l - t2;\n\n\trgb = [0, 0, 0];\n\tfor (var i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tvar h = hsl[0];\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar smin = s;\n\tvar lmin = Math.max(l, 0.01);\n\tvar sv;\n\tvar v;\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tv = (l + s) / 2;\n\tsv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tvar h = hsv[0] / 60;\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar hi = Math.floor(h) % 6;\n\n\tvar f = h - Math.floor(h);\n\tvar p = 255 * v * (1 - s);\n\tvar q = 255 * v * (1 - (s * f));\n\tvar t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tvar h = hsv[0];\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\tvar vmin = Math.max(v, 0.01);\n\tvar lmin;\n\tvar sl;\n\tvar l;\n\n\tl = (2 - s) * v;\n\tlmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tvar h = hwb[0] / 360;\n\tvar wh = hwb[1] / 100;\n\tvar bl = hwb[2] / 100;\n\tvar ratio = wh + bl;\n\tvar i;\n\tvar v;\n\tvar f;\n\tvar n;\n\n\t// wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\ti = Math.floor(6 * h);\n\tv = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tn = wh + f * (v - wh); // linear interpolation\n\n\tvar r;\n\tvar g;\n\tvar b;\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v; g = n; b = wh; break;\n\t\tcase 1: r = n; g = v; b = wh; break;\n\t\tcase 2: r = wh; g = v; b = n; break;\n\t\tcase 3: r = wh; g = n; b = v; break;\n\t\tcase 4: r = n; g = wh; b = v; break;\n\t\tcase 5: r = v; g = wh; b = n; break;\n\t}\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tvar c = cmyk[0] / 100;\n\tvar m = cmyk[1] / 100;\n\tvar y = cmyk[2] / 100;\n\tvar k = cmyk[3] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = 1 - Math.min(1, c * (1 - k) + k);\n\tg = 1 - Math.min(1, m * (1 - k) + k);\n\tb = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tvar x = xyz[0] / 100;\n\tvar y = xyz[1] / 100;\n\tvar z = xyz[2] / 100;\n\tvar r;\n\tvar g;\n\tvar b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tvar x = xyz[0];\n\tvar y = xyz[1];\n\tvar z = xyz[2];\n\tvar l;\n\tvar a;\n\tvar b;\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);\n\n\tl = (116 * y) - 16;\n\ta = 500 * (x - y);\n\tb = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar x;\n\tvar y;\n\tvar z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tvar y2 = Math.pow(y, 3);\n\tvar x2 = Math.pow(x, 3);\n\tvar z2 = Math.pow(z, 3);\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tvar l = lab[0];\n\tvar a = lab[1];\n\tvar b = lab[2];\n\tvar hr;\n\tvar h;\n\tvar c;\n\n\thr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tc = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tvar l = lch[0];\n\tvar c = lch[1];\n\tvar h = lch[2];\n\tvar a;\n\tvar b;\n\tvar hr;\n\n\thr = h / 360 * 2 * Math.PI;\n\ta = c * Math.cos(hr);\n\tb = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\tvar value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tvar ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tvar r = args[0];\n\tvar g = args[1];\n\tvar b = args[2];\n\n\t// we use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tvar ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tvar color = args % 10;\n\n\t// handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tvar mult = (~~(args > 50) + 1) * 0.5;\n\tvar r = ((color & 1) * mult) * 255;\n\tvar g = (((color >> 1) & 1) * mult) * 255;\n\tvar b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// handle greyscale\n\tif (args >= 232) {\n\t\tvar c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tvar rem;\n\tvar r = Math.floor(args / 36) / 5 * 255;\n\tvar g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tvar b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tvar integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tvar match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tvar colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(function (char) {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tvar integer = parseInt(colorString, 16);\n\tvar r = (integer >> 16) & 0xFF;\n\tvar g = (integer >> 8) & 0xFF;\n\tvar b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tvar r = rgb[0] / 255;\n\tvar g = rgb[1] / 255;\n\tvar b = rgb[2] / 255;\n\tvar max = Math.max(Math.max(r, g), b);\n\tvar min = Math.min(Math.min(r, g), b);\n\tvar chroma = (max - min);\n\tvar grayscale;\n\tvar hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma + 4;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tvar s = hsl[1] / 100;\n\tvar l = hsl[2] / 100;\n\tvar c = 1;\n\tvar f = 0;\n\n\tif (l < 0.5) {\n\t\tc = 2.0 * s * l;\n\t} else {\n\t\tc = 2.0 * s * (1.0 - l);\n\t}\n\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tvar s = hsv[1] / 100;\n\tvar v = hsv[2] / 100;\n\n\tvar c = s * v;\n\tvar f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tvar h = hcg[0] / 360;\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tvar pure = [0, 0, 0];\n\tvar hi = (h % 1) * 6;\n\tvar v = hi % 1;\n\tvar w = 1 - v;\n\tvar mg = 0;\n\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar v = c + g * (1.0 - c);\n\tvar f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\n\tvar l = g * (1.0 - c) + 0.5 * c;\n\tvar s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tvar c = hcg[1] / 100;\n\tvar g = hcg[2] / 100;\n\tvar v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tvar w = hwb[1] / 100;\n\tvar b = hwb[2] / 100;\n\tvar v = 1 - b;\n\tvar c = v - w;\n\tvar g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = convert.gray.hsv = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tvar val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tvar integer = (val << 16) + (val << 8) + val;\n\n\tvar string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tvar val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n","var conversions = require('./conversions');\n\n/*\n\tthis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tvar graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tvar models = Object.keys(conversions);\n\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tvar graph = buildGraph();\n\tvar queue = [fromModel]; // unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tvar current = queue.pop();\n\t\tvar adjacents = Object.keys(conversions[current]);\n\n\t\tfor (var len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tvar adjacent = adjacents[i];\n\t\t\tvar node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tvar path = [graph[toModel].parent, toModel];\n\tvar fn = conversions[graph[toModel].parent][toModel];\n\n\tvar cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tvar graph = deriveBFS(fromModel);\n\tvar conversion = {};\n\n\tvar models = Object.keys(graph);\n\tfor (var len = models.length, i = 0; i < len; i++) {\n\t\tvar toModel = models[i];\n\t\tvar node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// no possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n","var conversions = require('./conversions');\nvar route = require('./route');\n\nvar convert = {};\n\nvar models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tvar wrappedFn = function (args) {\n\t\tif (args === undefined || args === null) {\n\t\t\treturn args;\n\t\t}\n\n\t\tif (arguments.length > 1) {\n\t\t\targs = Array.prototype.slice.call(arguments);\n\t\t}\n\n\t\tvar result = fn(args);\n\n\t\t// we're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (var len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(function (fromModel) {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tvar routes = route(fromModel);\n\tvar routeModels = Object.keys(routes);\n\n\trouteModels.forEach(function (toModel) {\n\t\tvar fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n","'use strict';\n\nvar colorString = require('color-string');\nvar convert = require('color-convert');\n\nvar _slice = [].slice;\n\nvar skippedModels = [\n\t// to be honest, I don't really feel like keyword belongs in color convert, but eh.\n\t'keyword',\n\n\t// gray conflicts with some method names, and has its own method defined.\n\t'gray',\n\n\t// shouldn't really be in color-convert either...\n\t'hex'\n];\n\nvar hashedModelKeys = {};\nObject.keys(convert).forEach(function (model) {\n\thashedModelKeys[_slice.call(convert[model].labels).sort().join('')] = model;\n});\n\nvar limiters = {};\n\nfunction Color(obj, model) {\n\tif (!(this instanceof Color)) {\n\t\treturn new Color(obj, model);\n\t}\n\n\tif (model && model in skippedModels) {\n\t\tmodel = null;\n\t}\n\n\tif (model && !(model in convert)) {\n\t\tthrow new Error('Unknown model: ' + model);\n\t}\n\n\tvar i;\n\tvar channels;\n\n\tif (obj == null) { // eslint-disable-line no-eq-null,eqeqeq\n\t\tthis.model = 'rgb';\n\t\tthis.color = [0, 0, 0];\n\t\tthis.valpha = 1;\n\t} else if (obj instanceof Color) {\n\t\tthis.model = obj.model;\n\t\tthis.color = obj.color.slice();\n\t\tthis.valpha = obj.valpha;\n\t} else if (typeof obj === 'string') {\n\t\tvar result = colorString.get(obj);\n\t\tif (result === null) {\n\t\t\tthrow new Error('Unable to parse color from string: ' + obj);\n\t\t}\n\n\t\tthis.model = result.model;\n\t\tchannels = convert[this.model].channels;\n\t\tthis.color = result.value.slice(0, channels);\n\t\tthis.valpha = typeof result.value[channels] === 'number' ? result.value[channels] : 1;\n\t} else if (obj.length) {\n\t\tthis.model = model || 'rgb';\n\t\tchannels = convert[this.model].channels;\n\t\tvar newArr = _slice.call(obj, 0, channels);\n\t\tthis.color = zeroArray(newArr, channels);\n\t\tthis.valpha = typeof obj[channels] === 'number' ? obj[channels] : 1;\n\t} else if (typeof obj === 'number') {\n\t\t// this is always RGB - can be converted later on.\n\t\tobj &= 0xFFFFFF;\n\t\tthis.model = 'rgb';\n\t\tthis.color = [\n\t\t\t(obj >> 16) & 0xFF,\n\t\t\t(obj >> 8) & 0xFF,\n\t\t\tobj & 0xFF\n\t\t];\n\t\tthis.valpha = 1;\n\t} else {\n\t\tthis.valpha = 1;\n\n\t\tvar keys = Object.keys(obj);\n\t\tif ('alpha' in obj) {\n\t\t\tkeys.splice(keys.indexOf('alpha'), 1);\n\t\t\tthis.valpha = typeof obj.alpha === 'number' ? obj.alpha : 0;\n\t\t}\n\n\t\tvar hashedKeys = keys.sort().join('');\n\t\tif (!(hashedKeys in hashedModelKeys)) {\n\t\t\tthrow new Error('Unable to parse color from object: ' + JSON.stringify(obj));\n\t\t}\n\n\t\tthis.model = hashedModelKeys[hashedKeys];\n\n\t\tvar labels = convert[this.model].labels;\n\t\tvar color = [];\n\t\tfor (i = 0; i < labels.length; i++) {\n\t\t\tcolor.push(obj[labels[i]]);\n\t\t}\n\n\t\tthis.color = zeroArray(color);\n\t}\n\n\t// perform limitations (clamping, etc.)\n\tif (limiters[this.model]) {\n\t\tchannels = convert[this.model].channels;\n\t\tfor (i = 0; i < channels; i++) {\n\t\t\tvar limit = limiters[this.model][i];\n\t\t\tif (limit) {\n\t\t\t\tthis.color[i] = limit(this.color[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\tthis.valpha = Math.max(0, Math.min(1, this.valpha));\n\n\tif (Object.freeze) {\n\t\tObject.freeze(this);\n\t}\n}\n\nColor.prototype = {\n\ttoString: function () {\n\t\treturn this.string();\n\t},\n\n\ttoJSON: function () {\n\t\treturn this[this.model]();\n\t},\n\n\tstring: function (places) {\n\t\tvar self = this.model in colorString.to ? this : this.rgb();\n\t\tself = self.round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to[self.model](args);\n\t},\n\n\tpercentString: function (places) {\n\t\tvar self = this.rgb().round(typeof places === 'number' ? places : 1);\n\t\tvar args = self.valpha === 1 ? self.color : self.color.concat(this.valpha);\n\t\treturn colorString.to.rgb.percent(args);\n\t},\n\n\tarray: function () {\n\t\treturn this.valpha === 1 ? this.color.slice() : this.color.concat(this.valpha);\n\t},\n\n\tobject: function () {\n\t\tvar result = {};\n\t\tvar channels = convert[this.model].channels;\n\t\tvar labels = convert[this.model].labels;\n\n\t\tfor (var i = 0; i < channels; i++) {\n\t\t\tresult[labels[i]] = this.color[i];\n\t\t}\n\n\t\tif (this.valpha !== 1) {\n\t\t\tresult.alpha = this.valpha;\n\t\t}\n\n\t\treturn result;\n\t},\n\n\tunitArray: function () {\n\t\tvar rgb = this.rgb().color;\n\t\trgb[0] /= 255;\n\t\trgb[1] /= 255;\n\t\trgb[2] /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.push(this.valpha);\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tunitObject: function () {\n\t\tvar rgb = this.rgb().object();\n\t\trgb.r /= 255;\n\t\trgb.g /= 255;\n\t\trgb.b /= 255;\n\n\t\tif (this.valpha !== 1) {\n\t\t\trgb.alpha = this.valpha;\n\t\t}\n\n\t\treturn rgb;\n\t},\n\n\tround: function (places) {\n\t\tplaces = Math.max(places || 0, 0);\n\t\treturn new Color(this.color.map(roundToPlace(places)).concat(this.valpha), this.model);\n\t},\n\n\talpha: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(this.color.concat(Math.max(0, Math.min(1, val))), this.model);\n\t\t}\n\n\t\treturn this.valpha;\n\t},\n\n\t// rgb\n\tred: getset('rgb', 0, maxfn(255)),\n\tgreen: getset('rgb', 1, maxfn(255)),\n\tblue: getset('rgb', 2, maxfn(255)),\n\n\thue: getset(['hsl', 'hsv', 'hsl', 'hwb', 'hcg'], 0, function (val) { return ((val % 360) + 360) % 360; }), // eslint-disable-line brace-style\n\n\tsaturationl: getset('hsl', 1, maxfn(100)),\n\tlightness: getset('hsl', 2, maxfn(100)),\n\n\tsaturationv: getset('hsv', 1, maxfn(100)),\n\tvalue: getset('hsv', 2, maxfn(100)),\n\n\tchroma: getset('hcg', 1, maxfn(100)),\n\tgray: getset('hcg', 2, maxfn(100)),\n\n\twhite: getset('hwb', 1, maxfn(100)),\n\twblack: getset('hwb', 2, maxfn(100)),\n\n\tcyan: getset('cmyk', 0, maxfn(100)),\n\tmagenta: getset('cmyk', 1, maxfn(100)),\n\tyellow: getset('cmyk', 2, maxfn(100)),\n\tblack: getset('cmyk', 3, maxfn(100)),\n\n\tx: getset('xyz', 0, maxfn(100)),\n\ty: getset('xyz', 1, maxfn(100)),\n\tz: getset('xyz', 2, maxfn(100)),\n\n\tl: getset('lab', 0, maxfn(100)),\n\ta: getset('lab', 1),\n\tb: getset('lab', 2),\n\n\tkeyword: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn convert[this.model].keyword(this.color);\n\t},\n\n\thex: function (val) {\n\t\tif (arguments.length) {\n\t\t\treturn new Color(val);\n\t\t}\n\n\t\treturn colorString.to.hex(this.rgb().round().color);\n\t},\n\n\trgbNumber: function () {\n\t\tvar rgb = this.rgb().color;\n\t\treturn ((rgb[0] & 0xFF) << 16) | ((rgb[1] & 0xFF) << 8) | (rgb[2] & 0xFF);\n\t},\n\n\tluminosity: function () {\n\t\t// http://www.w3.org/TR/WCAG20/#relativeluminancedef\n\t\tvar rgb = this.rgb().color;\n\n\t\tvar lum = [];\n\t\tfor (var i = 0; i < rgb.length; i++) {\n\t\t\tvar chan = rgb[i] / 255;\n\t\t\tlum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);\n\t\t}\n\n\t\treturn 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];\n\t},\n\n\tcontrast: function (color2) {\n\t\t// http://www.w3.org/TR/WCAG20/#contrast-ratiodef\n\t\tvar lum1 = this.luminosity();\n\t\tvar lum2 = color2.luminosity();\n\n\t\tif (lum1 > lum2) {\n\t\t\treturn (lum1 + 0.05) / (lum2 + 0.05);\n\t\t}\n\n\t\treturn (lum2 + 0.05) / (lum1 + 0.05);\n\t},\n\n\tlevel: function (color2) {\n\t\tvar contrastRatio = this.contrast(color2);\n\t\tif (contrastRatio >= 7.1) {\n\t\t\treturn 'AAA';\n\t\t}\n\n\t\treturn (contrastRatio >= 4.5) ? 'AA' : '';\n\t},\n\n\tisDark: function () {\n\t\t// YIQ equation from http://24ways.org/2010/calculating-color-contrast\n\t\tvar rgb = this.rgb().color;\n\t\tvar yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;\n\t\treturn yiq < 128;\n\t},\n\n\tisLight: function () {\n\t\treturn !this.isDark();\n\t},\n\n\tnegate: function () {\n\t\tvar rgb = this.rgb();\n\t\tfor (var i = 0; i < 3; i++) {\n\t\t\trgb.color[i] = 255 - rgb.color[i];\n\t\t}\n\t\treturn rgb;\n\t},\n\n\tlighten: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] += hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdarken: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[2] -= hsl.color[2] * ratio;\n\t\treturn hsl;\n\t},\n\n\tsaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] += hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\tdesaturate: function (ratio) {\n\t\tvar hsl = this.hsl();\n\t\thsl.color[1] -= hsl.color[1] * ratio;\n\t\treturn hsl;\n\t},\n\n\twhiten: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[1] += hwb.color[1] * ratio;\n\t\treturn hwb;\n\t},\n\n\tblacken: function (ratio) {\n\t\tvar hwb = this.hwb();\n\t\thwb.color[2] += hwb.color[2] * ratio;\n\t\treturn hwb;\n\t},\n\n\tgrayscale: function () {\n\t\t// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale\n\t\tvar rgb = this.rgb().color;\n\t\tvar val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;\n\t\treturn Color.rgb(val, val, val);\n\t},\n\n\tfade: function (ratio) {\n\t\treturn this.alpha(this.valpha - (this.valpha * ratio));\n\t},\n\n\topaquer: function (ratio) {\n\t\treturn this.alpha(this.valpha + (this.valpha * ratio));\n\t},\n\n\trotate: function (degrees) {\n\t\tvar hsl = this.hsl();\n\t\tvar hue = hsl.color[0];\n\t\thue = (hue + degrees) % 360;\n\t\thue = hue < 0 ? 360 + hue : hue;\n\t\thsl.color[0] = hue;\n\t\treturn hsl;\n\t},\n\n\tmix: function (mixinColor, weight) {\n\t\t// ported from sass implementation in C\n\t\t// https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209\n\t\tif (!mixinColor || !mixinColor.rgb) {\n\t\t\tthrow new Error('Argument to \"mix\" was not a Color instance, but rather an instance of ' + typeof mixinColor);\n\t\t}\n\t\tvar color1 = mixinColor.rgb();\n\t\tvar color2 = this.rgb();\n\t\tvar p = weight === undefined ? 0.5 : weight;\n\n\t\tvar w = 2 * p - 1;\n\t\tvar a = color1.alpha() - color2.alpha();\n\n\t\tvar w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n\t\tvar w2 = 1 - w1;\n\n\t\treturn Color.rgb(\n\t\t\t\tw1 * color1.red() + w2 * color2.red(),\n\t\t\t\tw1 * color1.green() + w2 * color2.green(),\n\t\t\t\tw1 * color1.blue() + w2 * color2.blue(),\n\t\t\t\tcolor1.alpha() * p + color2.alpha() * (1 - p));\n\t}\n};\n\n// model conversion methods and static constructors\nObject.keys(convert).forEach(function (model) {\n\tif (skippedModels.indexOf(model) !== -1) {\n\t\treturn;\n\t}\n\n\tvar channels = convert[model].channels;\n\n\t// conversion methods\n\tColor.prototype[model] = function () {\n\t\tif (this.model === model) {\n\t\t\treturn new Color(this);\n\t\t}\n\n\t\tif (arguments.length) {\n\t\t\treturn new Color(arguments, model);\n\t\t}\n\n\t\tvar newAlpha = typeof arguments[channels] === 'number' ? channels : this.valpha;\n\t\treturn new Color(assertArray(convert[this.model][model].raw(this.color)).concat(newAlpha), model);\n\t};\n\n\t// 'static' construction methods\n\tColor[model] = function (color) {\n\t\tif (typeof color === 'number') {\n\t\t\tcolor = zeroArray(_slice.call(arguments), channels);\n\t\t}\n\t\treturn new Color(color, model);\n\t};\n});\n\nfunction roundTo(num, places) {\n\treturn Number(num.toFixed(places));\n}\n\nfunction roundToPlace(places) {\n\treturn function (num) {\n\t\treturn roundTo(num, places);\n\t};\n}\n\nfunction getset(model, channel, modifier) {\n\tmodel = Array.isArray(model) ? model : [model];\n\n\tmodel.forEach(function (m) {\n\t\t(limiters[m] || (limiters[m] = []))[channel] = modifier;\n\t});\n\n\tmodel = model[0];\n\n\treturn function (val) {\n\t\tvar result;\n\n\t\tif (arguments.length) {\n\t\t\tif (modifier) {\n\t\t\t\tval = modifier(val);\n\t\t\t}\n\n\t\t\tresult = this[model]();\n\t\t\tresult.color[channel] = val;\n\t\t\treturn result;\n\t\t}\n\n\t\tresult = this[model]().color[channel];\n\t\tif (modifier) {\n\t\t\tresult = modifier(result);\n\t\t}\n\n\t\treturn result;\n\t};\n}\n\nfunction maxfn(max) {\n\treturn function (v) {\n\t\treturn Math.max(0, Math.min(max, v));\n\t};\n}\n\nfunction assertArray(val) {\n\treturn Array.isArray(val) ? val : [val];\n}\n\nfunction zeroArray(arr, length) {\n\tfor (var i = 0; i < length; i++) {\n\t\tif (typeof arr[i] !== 'number') {\n\t\t\tarr[i] = 0;\n\t\t}\n\t}\n\n\treturn arr;\n}\n\nmodule.exports = Color;\n","import {\r\n  pieces,\r\n  seeds,\r\n  OTHER_WALLKICK_DATA,\r\n  I_WALLKICK_DATA,\r\n} from \"./game_data\";\r\nimport shuffle from \"shuffle-array\";\r\nvar Color = require(\"color\");\r\n\r\nconst DEFAULT_OPTIONS = {\r\n  screenWidth: 640,\r\n  screenHeight: 480,\r\n  gridWidth: 32,\r\n  gridHeight: 20,\r\n  voidRadius: 16,\r\n  crustThickness: 16,\r\n};\r\n\r\nconst queue = [];\r\n\r\nexport function getWrapX(GRID_WIDTH) {\r\n  return function wrapX(x) {\r\n    if (x >= GRID_WIDTH) return x % GRID_WIDTH;\r\n    if (x < 0) return wrapX(GRID_WIDTH + x);\r\n    return x;\r\n  };\r\n}\r\n\r\nexport function getPieceGridCoords(piece, grid) {\r\n  // console.log('grid: ', grid[0]);\r\n  const wrapX = getWrapX(grid[0].length);\r\n  let coords = [];\r\n\r\n  piece.shape.forEach((line, y) => {\r\n    line.forEach((block, x) => {\r\n      if (block) {\r\n        coords.push([x + piece.x, y + piece.y]);\r\n      }\r\n    });\r\n  });\r\n\r\n  coords = coords.map(([x, y]) => {\r\n    if (piece.angle === 0) return [wrapX(x), y];\r\n    let xTranslation = piece.x + piece.centre[0];\r\n    let yTranslation = piece.y + piece.centre[1];\r\n    let _x = x - xTranslation;\r\n    let _y = y - yTranslation;\r\n\r\n    if (piece.angle === 1) {\r\n      [_x, _y] = [_y, -_x];\r\n    } else if (piece.angle === 2) {\r\n      [_x, _y] = [-_x, -_y];\r\n    } else if (piece.angle === 3) {\r\n      [_x, _y] = [-_y, _x];\r\n    }\r\n\r\n    _x += xTranslation;\r\n    _y += yTranslation;\r\n    return [wrapX(_x), _y];\r\n  });\r\n\r\n  return coords;\r\n}\r\n\r\n// use getPieceGridCoords\r\nexport function doesCollide(piece, grid) {\r\n  const coords = getPieceGridCoords(piece, grid);\r\n  let collides;\r\n  coords.forEach(([x, y]) => {\r\n    if (y >= grid.length) collides = true;\r\n    if (grid[y] && grid[y][x]) {\r\n      collides = true;\r\n    }\r\n  });\r\n  return collides;\r\n}\r\n\r\nexport function spawn() {\r\n  const next = getNext();\r\n  queue.shift();\r\n  if (next.type === \"seed\") {\r\n    console.log(\"next: \", next);\r\n    return {\r\n      ...next,\r\n      x: 14,\r\n      y: 0,\r\n      type: \"seed\",\r\n      angle: 0,\r\n      falling: 0,\r\n      fallNext: 1,\r\n      shape: [[1]],\r\n      centre: [0, 0],\r\n    };\r\n  } else {\r\n    const piece = {\r\n      x: 14,\r\n      y: 0,\r\n      type: next,\r\n      angle: 0,\r\n      falling: 0,\r\n      fallNext: 1,\r\n      shape: pieces[next].shape,\r\n      centre: pieces[next].centre,\r\n    };\r\n    return piece;\r\n  }\r\n}\r\n\r\nexport function getNext() {\r\n  if (queue.length === 0) {\r\n    // Replenish queue\r\n    let pieceTypes = Object.keys(pieces);\r\n    pieceTypes.push({ type: \"seed\", ...seeds[0] });\r\n    shuffle(pieceTypes);\r\n    console.log(pieceTypes);\r\n    queue.push(...pieceTypes);\r\n  }\r\n  return queue[0];\r\n}\r\n\r\nexport function removeLines(lines, grid) {\r\n  lines.reverse().forEach((y) => {\r\n    grid.splice(y, 1);\r\n  });\r\n  for (let i = 0; i < lines.length; i++) {\r\n    let newEmptyRow = new Array(32).fill(0);\r\n    grid.unshift(newEmptyRow);\r\n  }\r\n}\r\n\r\nexport function calculatePoints(lines, etc) {\r\n  if (lines === 1) {\r\n    return 100;\r\n  } else if (lines === 2) {\r\n    return 300;\r\n  } else if (lines === 3) {\r\n    return 500;\r\n  } else {\r\n    // TETRIS\r\n    return 800;\r\n  }\r\n}\r\n\r\nexport function start() {\r\n  this.score = 0;\r\n  this.lines = 0;\r\n  this.level = 1;\r\n\r\n  this.addScore = (points) => {\r\n    this.score += points;\r\n  };\r\n\r\n  /**\r\n   * Awarn points, increase linecount and level\r\n   * @param {*} linesCleared\r\n   * @param {*} etc\r\n   */\r\n  this.awardPoints = (linesCleared, etc) => {\r\n    const points = calculatePoints(linesCleared, etc);\r\n    this.score += points;\r\n    this.lines += linesCleared;\r\n  };\r\n}\r\n\r\nfunction tryRotate(piece, grid) {\r\n  console.log(\"piece: \", piece);\r\n  const wrapX = getWrapX(grid[0].length);\r\n  let data = piece.type === \"i\" ? I_WALLKICK_DATA : OTHER_WALLKICK_DATA;\r\n  let sequence = data[`${piece.rotatedFrom}${piece.angle}`];\r\n  console.log(\"sequence: \", sequence);\r\n  for (let i = 0; i < sequence.length; i++) {\r\n    let d = sequence[i];\r\n    console.log(\"d: \", d);\r\n    let shiftedPiece = {\r\n      ...piece,\r\n      x: wrapX(piece.x - d[0]), // mirror x axis\r\n      y: piece.y - d[1],\r\n    };\r\n    if (!doesCollide(shiftedPiece, grid)) {\r\n      return shiftedPiece;\r\n    }\r\n  }\r\n}\r\n\r\nObject.keys(pieces).forEach((pKey) => {\r\n  var p = pieces[pKey];\r\n  var colour = Color(p.colour);\r\n  p.dimmed = colour.desaturate(0.75).string();\r\n});\r\n\r\nfunction getColour(piece, opts = {}) {\r\n  if (piece.colour) return piece.colour;\r\n  const archetype = pieces[piece.type];\r\n  if (archetype) {\r\n    return opts.dim ? archetype.dimmed : archetype.colour;\r\n  } else {\r\n    return \"gray\";\r\n  }\r\n}\r\n\r\nexport { tryRotate, getColour };\r\n","export const getCircleToGrid = ({\r\n  GRID_WIDTH,\r\n  GRID_HEIGHT,\r\n  VOID_RADIUS,\r\n  ACTIVE_RADIUS,\r\n}) =>\r\n  function getGridCoords(angle, radius) {\r\n    const gridX = Math.floor((angle / (2 * Math.PI)) * GRID_WIDTH);\r\n    const gridY = Math.floor(\r\n      ((radius - VOID_RADIUS) / ACTIVE_RADIUS) * GRID_HEIGHT\r\n    );\r\n    return [gridX, gridY];\r\n  };\r\n\r\nconst halfPi = Math.PI / 2;\r\n/**\r\n * Get angle from top, clockwise, positive\r\n * @param {number} x\r\n * @param {number} y\r\n */\r\nexport function getAngle(x, y) {\r\n  // reorient from top\r\n  let angle = Math.atan(y / x) + halfPi;\r\n  // flip around left-oriented angles\r\n  if (x < 0) angle += Math.PI;\r\n  return angle;\r\n}\r\n","/*!\n * Cross-Browser Split 1.1.1\n * Copyright 2007-2012 Steven Levithan <stevenlevithan.com>\n * Available under the MIT License\n * ECMAScript compliant, uniform cross-browser split method\n */\n\n/**\n * Splits a string into an array of strings using a regex or string separator. Matches of the\n * separator are not included in the result array. However, if `separator` is a regex that contains\n * capturing groups, backreferences are spliced into the result each time `separator` is matched.\n * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably\n * cross-browser.\n * @param {String} str String to split.\n * @param {RegExp|String} separator Regex or string to use for separating the string.\n * @param {Number} [limit] Maximum number of items to include in the result array.\n * @returns {Array} Array of substrings.\n * @example\n *\n * // Basic use\n * split('a b c d', ' ');\n * // -> ['a', 'b', 'c', 'd']\n *\n * // With limit\n * split('a b c d', ' ', 2);\n * // -> ['a', 'b']\n *\n * // Backreferences in result array\n * split('..word1 word2..', /([a-z]+)(\\d+)/i);\n * // -> ['..', 'word', '1', ' ', 'word', '2', '..']\n */\nmodule.exports = (function split(undef) {\n\n  var nativeSplit = String.prototype.split,\n    compliantExecNpcg = /()??/.exec(\"\")[1] === undef,\n    // NPCG: nonparticipating capturing group\n    self;\n\n  self = function(str, separator, limit) {\n    // If `separator` is not a regex, use `nativeSplit`\n    if (Object.prototype.toString.call(separator) !== \"[object RegExp]\") {\n      return nativeSplit.call(str, separator, limit);\n    }\n    var output = [],\n      flags = (separator.ignoreCase ? \"i\" : \"\") + (separator.multiline ? \"m\" : \"\") + (separator.extended ? \"x\" : \"\") + // Proposed for ES6\n      (separator.sticky ? \"y\" : \"\"),\n      // Firefox 3+\n      lastLastIndex = 0,\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      separator = new RegExp(separator.source, flags + \"g\"),\n      separator2, match, lastIndex, lastLength;\n    str += \"\"; // Type-convert\n    if (!compliantExecNpcg) {\n      // Doesn't need flags gy, but they don't hurt\n      separator2 = new RegExp(\"^\" + separator.source + \"$(?!\\\\s)\", flags);\n    }\n    /* Values for `limit`, per the spec:\n     * If undefined: 4294967295 // Math.pow(2, 32) - 1\n     * If 0, Infinity, or NaN: 0\n     * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;\n     * If negative number: 4294967296 - Math.floor(Math.abs(limit))\n     * If other: Type-convert, then use the above rules\n     */\n    limit = limit === undef ? -1 >>> 0 : // Math.pow(2, 32) - 1\n    limit >>> 0; // ToUint32(limit)\n    while (match = separator.exec(str)) {\n      // `separator.lastIndex` is not reliable cross-browser\n      lastIndex = match.index + match[0].length;\n      if (lastIndex > lastLastIndex) {\n        output.push(str.slice(lastLastIndex, match.index));\n        // Fix browsers whose `exec` methods don't consistently return `undefined` for\n        // nonparticipating capturing groups\n        if (!compliantExecNpcg && match.length > 1) {\n          match[0].replace(separator2, function() {\n            for (var i = 1; i < arguments.length - 2; i++) {\n              if (arguments[i] === undef) {\n                match[i] = undef;\n              }\n            }\n          });\n        }\n        if (match.length > 1 && match.index < str.length) {\n          Array.prototype.push.apply(output, match.slice(1));\n        }\n        lastLength = match[0].length;\n        lastLastIndex = lastIndex;\n        if (output.length >= limit) {\n          break;\n        }\n      }\n      if (separator.lastIndex === match.index) {\n        separator.lastIndex++; // Avoid an infinite loop\n      }\n    }\n    if (lastLastIndex === str.length) {\n      if (lastLength || !separator.test(\"\")) {\n        output.push(\"\");\n      }\n    } else {\n      output.push(str.slice(lastLastIndex));\n    }\n    return output.length > limit ? output.slice(0, limit) : output;\n  };\n\n  return self;\n})();\n","\nvar indexOf = [].indexOf;\n\nmodule.exports = function(arr, obj){\n  if (indexOf) return arr.indexOf(obj);\n  for (var i = 0; i < arr.length; ++i) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n};","// contains, add, remove, toggle\nvar indexof = require('indexof')\n\nmodule.exports = ClassList\n\nfunction ClassList(elem) {\n    var cl = elem.classList\n\n    if (cl) {\n        return cl\n    }\n\n    var classList = {\n        add: add\n        , remove: remove\n        , contains: contains\n        , toggle: toggle\n        , toString: $toString\n        , length: 0\n        , item: item\n    }\n\n    return classList\n\n    function add(token) {\n        var list = getTokens()\n        if (indexof(list, token) > -1) {\n            return\n        }\n        list.push(token)\n        setTokens(list)\n    }\n\n    function remove(token) {\n        var list = getTokens()\n            , index = indexof(list, token)\n\n        if (index === -1) {\n            return\n        }\n\n        list.splice(index, 1)\n        setTokens(list)\n    }\n\n    function contains(token) {\n        return indexof(getTokens(), token) > -1\n    }\n\n    function toggle(token) {\n        if (contains(token)) {\n            remove(token)\n            return false\n        } else {\n            add(token)\n            return true\n        }\n    }\n\n    function $toString() {\n        return elem.className\n    }\n\n    function item(index) {\n        var tokens = getTokens()\n        return tokens[index] || null\n    }\n\n    function getTokens() {\n        var className = elem.className\n\n        return filter(className.split(\" \"), isTruthy)\n    }\n\n    function setTokens(list) {\n        var length = list.length\n\n        elem.className = list.join(\" \")\n        classList.length = length\n\n        for (var i = 0; i < list.length; i++) {\n            classList[i] = list[i]\n        }\n\n        delete list[length]\n    }\n}\n\nfunction filter (arr, fn) {\n    var ret = []\n    for (var i = 0; i < arr.length; i++) {\n        if (fn(arr[i])) ret.push(arr[i])\n    }\n    return ret\n}\n\nfunction isTruthy(value) {\n    return !!value\n}\n","var split = require('browser-split')\nvar ClassList = require('class-list')\n\nvar w = typeof window === 'undefined' ? require('html-element') : window\nvar document = w.document\nvar Text = w.Text\n\nfunction context () {\n\n  var cleanupFuncs = []\n\n  function h() {\n    var args = [].slice.call(arguments), e = null\n    function item (l) {\n      var r\n      function parseClass (string) {\n        // Our minimal parser doesn’t understand escaping CSS special\n        // characters like `#`. Don’t use them. More reading:\n        // https://mathiasbynens.be/notes/css-escapes .\n\n        var m = split(string, /([\\.#]?[^\\s#.]+)/)\n        if(/^\\.|#/.test(m[1]))\n          e = document.createElement('div')\n        forEach(m, function (v) {\n          var s = v.substring(1,v.length)\n          if(!v) return\n          if(!e)\n            e = document.createElement(v)\n          else if (v[0] === '.')\n            ClassList(e).add(s)\n          else if (v[0] === '#')\n            e.setAttribute('id', s)\n        })\n      }\n\n      if(l == null)\n        ;\n      else if('string' === typeof l) {\n        if(!e)\n          parseClass(l)\n        else\n          e.appendChild(r = document.createTextNode(l))\n      }\n      else if('number' === typeof l\n        || 'boolean' === typeof l\n        || l instanceof Date\n        || l instanceof RegExp ) {\n          e.appendChild(r = document.createTextNode(l.toString()))\n      }\n      //there might be a better way to handle this...\n      else if (isArray(l))\n        forEach(l, item)\n      else if(isNode(l))\n        e.appendChild(r = l)\n      else if(l instanceof Text)\n        e.appendChild(r = l)\n      else if ('object' === typeof l) {\n        for (var k in l) {\n          if('function' === typeof l[k]) {\n            if(/^on\\w+/.test(k)) {\n              (function (k, l) { // capture k, l in the closure\n                if (e.addEventListener){\n                  e.addEventListener(k.substring(2), l[k], false)\n                  cleanupFuncs.push(function(){\n                    e.removeEventListener(k.substring(2), l[k], false)\n                  })\n                }else{\n                  e.attachEvent(k, l[k])\n                  cleanupFuncs.push(function(){\n                    e.detachEvent(k, l[k])\n                  })\n                }\n              })(k, l)\n            } else {\n              // observable\n              e[k] = l[k]()\n              cleanupFuncs.push(l[k](function (v) {\n                e[k] = v\n              }))\n            }\n          }\n          else if(k === 'style') {\n            if('string' === typeof l[k]) {\n              e.style.cssText = l[k]\n            }else{\n              for (var s in l[k]) (function(s, v) {\n                if('function' === typeof v) {\n                  // observable\n                  e.style.setProperty(s, v())\n                  cleanupFuncs.push(v(function (val) {\n                    e.style.setProperty(s, val)\n                  }))\n                } else\n                  var match = l[k][s].match(/(.*)\\W+!important\\W*$/);\n                  if (match) {\n                    e.style.setProperty(s, match[1], 'important')\n                  } else {\n                    e.style.setProperty(s, l[k][s])\n                  }\n              })(s, l[k][s])\n            }\n          } else if(k === 'attrs') {\n            for (var v in l[k]) {\n              e.setAttribute(v, l[k][v])\n            }\n          }\n          else if (k.substr(0, 5) === \"data-\") {\n            e.setAttribute(k, l[k])\n          } else {\n            e[k] = l[k]\n          }\n        }\n      } else if ('function' === typeof l) {\n        //assume it's an observable!\n        var v = l()\n        e.appendChild(r = isNode(v) ? v : document.createTextNode(v))\n\n        cleanupFuncs.push(l(function (v) {\n          if(isNode(v) && r.parentElement)\n            r.parentElement.replaceChild(v, r), r = v\n          else\n            r.textContent = v\n        }))\n      }\n\n      return r\n    }\n    while(args.length)\n      item(args.shift())\n\n    return e\n  }\n\n  h.cleanup = function () {\n    for (var i = 0; i < cleanupFuncs.length; i++){\n      cleanupFuncs[i]()\n    }\n    cleanupFuncs.length = 0\n  }\n\n  return h\n}\n\nvar h = module.exports = context()\nh.context = context\n\nfunction isNode (el) {\n  return el && el.nodeName && el.nodeType\n}\n\nfunction forEach (arr, fn) {\n  if (arr.forEach) return arr.forEach(fn)\n  for (var i = 0; i < arr.length; i++) fn(arr[i], i)\n}\n\nfunction isArray (arr) {\n  return Object.prototype.toString.call(arr) == '[object Array]'\n}\n\n\n","function timestamp() {\r\n  return window.performance && window.performance.now\r\n    ? window.performance.now()\r\n    : Date.now();\r\n}\r\n\r\nexport { timestamp }","import { timestamp } from \"./util\";\r\n\r\nfunction Plant(seed, data) {\r\n  console.log(\"seed: \", seed);\r\n  const wrapX = data.wrapX;\r\n  var plantedAt = timestamp();\r\n  var age = 0;\r\n  // var { grid } = data;\r\n  var b = { ...seed, type: \"plant\", shape: null };\r\n  var leaves = [];\r\n  var growth = 0;\r\n  var gps = 4;\r\n\r\n  // check direction\r\n  // direction plant down -> grow up\r\n  leaves.push({ x: seed.x, y: seed.y, life: 3, angle: 0 });\r\n\r\n  this.grow = (delta, grid) => {\r\n    age += delta;\r\n    switch (seed.name) {\r\n      case \"swamp\":\r\n        if (age / (1000 / gps) > growth) {\r\n          leaves.forEach((leaf) => {\r\n            if (grid[leaf.y + 1] && !grid[leaf.y + 1][leaf.x]) {\r\n              // fall down\r\n              leaf.angle = 2;\r\n            }\r\n            var mLeaf = moveLeaf(leaf);\r\n            mLeaf.x = wrapX(mLeaf.x);\r\n            if (grid[mLeaf.y] && grid[mLeaf.y][mLeaf.x]) {\r\n              // Collides - no move\r\n            } else {\r\n              leaf.x = mLeaf.x;\r\n              leaf.y = mLeaf.y;\r\n              if (grid[leaf.y]) grid[leaf.y][leaf.x] = { ...b };\r\n            }\r\n          });\r\n\r\n          if (growth === 0) {\r\n            // one left, one right\r\n            const leaf = leaves[0];\r\n            leaf.angle = 1;\r\n            leaves.push({ ...leaf, angle: 3 });\r\n          }\r\n\r\n          growth++;\r\n          if (growth > 7) {\r\n            this.finished = true;\r\n          }\r\n        }\r\n\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n}\r\n\r\nfunction moveLeaf(initLeaf) {\r\n  var leaf = { ...initLeaf };\r\n  if (leaf.angle === 0) leaf.y -= 1;\r\n  if (leaf.angle === 1) leaf.x += 1;\r\n  if (leaf.angle === 2) leaf.y += 1;\r\n  if (leaf.angle === 3) leaf.x -= 1;\r\n  return leaf;\r\n}\r\n\r\nexport { Plant };\r\n","import { updateFps, renderFps } from \"./fps\";\r\nimport ModeSelector from \"./mode_selector\";\r\n// import memoize from \"lodash.memoize\";\r\nimport input from \"./input\";\r\nimport {\r\n  start,\r\n  getWrapX,\r\n  getPieceGridCoords,\r\n  doesCollide,\r\n  spawn,\r\n  getNext,\r\n  removeLines,\r\n  calculatePoints,\r\n  tryRotate,\r\n  getColour,\r\n} from \"./game\";\r\nimport { getCircleToGrid, getAngle } from \"./geometry\";\r\nimport h from \"hyperscript\";\r\nimport { Plant } from \"./plant\";\r\nimport { timestamp } from \"./util\";\r\n\r\nconst SCREEN_WIDTH = 640;\r\nconst SCREEN_HEIGHT = 480;\r\nconst GRID_WIDTH = 32;\r\nconst GRID_HEIGHT = 14;\r\nconst VOID_RADIUS = 16;\r\nconst CRUST_THICKNESS = 16;\r\nconst SCREEN_CENTRE = [(SCREEN_WIDTH - 1) / 2, (SCREEN_HEIGHT - 1) / 2];\r\nconst ACTIVE_RADIUS = SCREEN_HEIGHT / 2 - (VOID_RADIUS + CRUST_THICKNESS);\r\n\r\nlet circleRadius = SCREEN_HEIGHT - 1 * CRUST_THICKNESS;\r\nconst circle = {\r\n  x: (SCREEN_WIDTH - circleRadius) / 2,\r\n  y: CRUST_THICKNESS,\r\n  bottom: SCREEN_HEIGHT - CRUST_THICKNESS,\r\n  w: (SCREEN_WIDTH - circleRadius) / 2 + circleRadius,\r\n};\r\nlet ctx;\r\nconst events = [];\r\n\r\nconst modeSelector = {};\r\n\r\nlet clearing = null;\r\nlet piece = null;\r\nlet mainMenu = true;\r\nlet round = null;\r\nlet plant = null;\r\n\r\nconst wrapX = getWrapX(GRID_WIDTH);\r\n\r\nconst grid = new Array(GRID_HEIGHT).fill(null).map(() => {\r\n  return new Array(GRID_WIDTH).fill(0);\r\n});\r\nlet grid2;\r\n\r\nfunction clearGrid() {\r\n  grid.forEach((row) => {\r\n    row.fill(0);\r\n  });\r\n}\r\n\r\nfunction gridLookup(x, y) {\r\n  return grid[y] && grid[y][x];\r\n}\r\n// let lookup = memoize(gridLookup, (x, y) => `${x},${y}`);\r\n\r\nconst getGridCoords = getCircleToGrid({\r\n  GRID_WIDTH,\r\n  GRID_HEIGHT,\r\n  VOID_RADIUS,\r\n  ACTIVE_RADIUS,\r\n});\r\n\r\nfunction renderGrid(grid) {\r\n  ctx.fillStyle = \"rgba(0, 0, 0, 1)\";\r\n  ctx.fillRect(0, 0, SCREEN_WIDTH, SCREEN_HEIGHT);\r\n  let pixelHeight = 2;\r\n\r\n  let hue = 0;\r\n  if (modeSelector.mode === \"colour\") {\r\n    hue = (dotX / GRID_WIDTH) * 360;\r\n    ctx.fillStyle = `hsla(${hue}deg, 100%, 80%, 1.0)`;\r\n  } else if (modeSelector.mode === \"nuts\") {\r\n    hue = (dotX / (GRID_WIDTH / 20)) * 360;\r\n    ctx.fillStyle = `hsla(${hue}deg, 100%, 80%, 1.0)`;\r\n  } else if (modeSelector.mode === \"vcr\") {\r\n    ctx.fillStyle = `rgb(10,250,100)`;\r\n    pixelHeight = 1;\r\n  } else {\r\n    ctx.fillStyle = `rgb(200,200,200)`;\r\n  }\r\n\r\n  const xCentre = SCREEN_CENTRE[0];\r\n  const yCentre = SCREEN_CENTRE[1];\r\n\r\n  // for each pixel\r\n  for (let y = circle.y; y < circle.bottom; y += 2) {\r\n    for (let x = circle.x; x < circle.w; x += 2) {\r\n      const dx = x - xCentre;\r\n      const dy = y - yCentre;\r\n\r\n      const radius = Math.sqrt(dx ** 2 + dy ** 2);\r\n      const angle = getAngle(dx, dy);\r\n\r\n      const [gridX, gridY] = getGridCoords(angle, radius);\r\n\r\n      let fuzz = 0;\r\n      if (modeSelector.mode === \"fuzzy\") {\r\n        fuzz = Math.random() * 3 - 1.5;\r\n      } else if (modeSelector.mode === \"nuts\") {\r\n        fuzz = Math.random() * 6 - 3;\r\n      }\r\n      if (shock) fuzz = Math.random() * shock - shock / 2;\r\n\r\n      // if (gridLookup(gridX, gridY)) {\r\n      // if (lookup(gridX, gridY)) {\r\n      if (grid[gridY] && grid[gridY][gridX]) {\r\n        const cell = grid[gridY][gridX];\r\n        const hasShape = cell.shape;\r\n        const clearingRow = cell === 3;\r\n        if (modeSelector.mode === \"colour\" || modeSelector.mode === \"nuts\") {\r\n          let hue2 = (hue + (angle / (2 * Math.PI)) * 360) % 360;\r\n          ctx.fillStyle = `hsla(${hue2}deg, 100%, 80%, 1.0)`;\r\n        } else {\r\n          if (hasShape) {\r\n            ctx.fillStyle = getColour(cell);\r\n          } else if (clearingRow) {\r\n            fuzz = Math.random() * 3 - 1.5;\r\n            let hue2 = (hue + (angle / (2 * Math.PI)) * 360) % 360;\r\n            ctx.fillStyle = `hsla(${hue2}deg, 100%, 80%, 1.0)`;\r\n          } else {\r\n            ctx.fillStyle = cell.colour || `rgb(200,200,200)`;\r\n          }\r\n        }\r\n        ctx.fillRect(x, y, 2 + fuzz, pixelHeight + fuzz);\r\n      }\r\n    }\r\n  }\r\n  // lookup.cache.clear();\r\n}\r\n\r\nfunction getClickHandler() {\r\n  return function handleClick(e) {\r\n    const startedAt = timestamp();\r\n    var rect = e.target.getBoundingClientRect();\r\n    var x = e.clientX - rect.left; //x position within the element.\r\n    var y = e.clientY - rect.top; //y position within the element.\r\n\r\n    var scale = SCREEN_WIDTH / rect.width;\r\n\r\n    x = x * scale;\r\n    y = y * scale;\r\n\r\n    const dx = x - SCREEN_CENTRE[0];\r\n    const dy = y - SCREEN_CENTRE[1];\r\n\r\n    const radius = Math.sqrt(dx ** 2 + dy ** 2);\r\n    const angle = getAngle(dx, dy);\r\n\r\n    const [gridX, gridY] = getGridCoords(angle, radius);\r\n    grid[gridY] && (grid[gridY][gridX] = 1);\r\n  };\r\n}\r\n\r\nfunction lockPieceIn() {\r\n  if (piece.type === \"seed\") {\r\n    // Check appropriate soil condition\r\n    // Plant down\r\n    piece.y = piece.y + 1;\r\n    plant = new Plant(piece, { wrapX });\r\n  } else {\r\n    getPieceGridCoords(piece, grid).forEach(([x, y]) => {\r\n      if (grid[y]) grid[y][x] = { colour: getColour(piece, { dim: true }) };\r\n    });\r\n  }\r\n  piece = null;\r\n}\r\n\r\nfunction newGame() {\r\n  round = new start();\r\n  console.log(\"round: \", round);\r\n  clearGrid();\r\n  mainMenu = false;\r\n  const menuEl = document.querySelector(\".main-menu\");\r\n  menuEl.parentElement.removeChild(menuEl);\r\n}\r\n\r\nlet shock = 0;\r\nlet shockDecay = 0.1;\r\n\r\nfunction processEvent(event) {\r\n  // console.log(event);\r\n\r\n  if (event === \"go nuts\") {\r\n    shock = 50;\r\n  } else if (event[0] === \"input\") {\r\n    if (event[1] === \"enter\") {\r\n      if (mainMenu) {\r\n        newGame();\r\n        return;\r\n      }\r\n    }\r\n    if (piece && !mainMenu) {\r\n      switch (event[1]) {\r\n        case \"left\":\r\n          if (doesCollide({ ...piece, x: wrapX(piece.x + 1) }, grid)) {\r\n            // clunk\r\n          } else {\r\n            piece.x = wrapX(piece.x + 1);\r\n          }\r\n          break;\r\n        case \"right\":\r\n          if (doesCollide({ ...piece, x: wrapX(piece.x - 1) }, grid)) {\r\n            // clonk\r\n          } else {\r\n            piece.x = wrapX(piece.x - 1);\r\n          }\r\n          break;\r\n        case \"down\":\r\n          if (doesCollide({ ...piece, y: piece.y + 1 }, grid)) {\r\n            lockPieceIn();\r\n          } else {\r\n            piece.y += 1;\r\n          }\r\n          break;\r\n        case \"rotateR\":\r\n          //piece.angle = (piece.angle + 1) % 4;\r\n          piece.rotation = 1;\r\n          break;\r\n        case \"rotateL\":\r\n          piece.rotation = -1;\r\n          // piece.angle = piece.angle - 1;\r\n          // if (piece.angle < 0) piece.angle = 3;\r\n          break;\r\n        default:\r\n          break;\r\n      }\r\n    }\r\n  } else if (event[0] === \"clear\") {\r\n  }\r\n}\r\n\r\nlet startTime;\r\nlet dotX = 0;\r\nconst speed = 2 / 30 / 32;\r\nlet fps;\r\n// Gravity\r\nlet fallingSpeed = 0.001;\r\n\r\nfunction update(t) {\r\n  while (events.length) {\r\n    let event = events.shift();\r\n    processEvent(event);\r\n  }\r\n  fps = updateFps(t) || fps;\r\n  dotX = wrapX(dotX + speed * t);\r\n\r\n  shock = Math.max(0, shock - shockDecay * t);\r\n\r\n  grid2 = grid.map((line) => line.slice());\r\n\r\n  if (piece) {\r\n    piece.falling += t * fallingSpeed;\r\n    if (piece.falling > piece.fallNext) {\r\n      piece.fallNext++;\r\n      if (doesCollide({ ...piece, y: piece.y + 1 }, grid)) {\r\n        lockPieceIn();\r\n        return;\r\n      } else {\r\n        piece.y += 1;\r\n      }\r\n    }\r\n    if (piece.rotation && piece.type !== \"o\") {\r\n      // basic attempt\r\n      const pieceRotated = {\r\n        ...piece,\r\n        rotation: 0,\r\n        rotatedFrom: piece.angle,\r\n        angle: { \"-1\": 3, 0: 0, 1: 1, 2: 2, 3: 3, 4: 0 }[\r\n          piece.angle + piece.rotation\r\n        ],\r\n      };\r\n      const rotateAttempt = tryRotate(pieceRotated, grid);\r\n      piece = rotateAttempt || piece;\r\n      piece.rotation = 0;\r\n    }\r\n\r\n    const pieceCoords = getPieceGridCoords(piece, grid);\r\n    pieceCoords.forEach(([x, y]) => {\r\n      if (y < 0) return;\r\n      if (grid2[y]) grid2[y][x] = piece;\r\n    });\r\n  } else if (clearing) {\r\n    // animating\r\n    if (timestamp() - clearing.at >= 500) {\r\n      removeLines(clearing.lines, grid);\r\n      grid2 = grid;\r\n      clearing = null;\r\n    }\r\n  } else if (plant) {\r\n    plant.grow(t, grid);\r\n    if (plant.finished) {\r\n      plant = null;\r\n    }\r\n  } else {\r\n    const completeLines = [];\r\n    grid2.forEach((line, y) => {\r\n      if (line.find((block) => block === 0) === undefined) {\r\n        completeLines.push(y);\r\n        grid[y].fill(3);\r\n      }\r\n    });\r\n    if (completeLines.length) {\r\n      clearing = {\r\n        lines: completeLines,\r\n        at: timestamp(),\r\n      };\r\n      const pointsAwarded = calculatePoints(completeLines.length, {\r\n        level,\r\n        lastPiece: null,\r\n      });\r\n      const level = round.level;\r\n\r\n      // check level\r\n      // check last piece to detect T-spins, room to manoeuvre\r\n      round.addScore(pointsAwarded);\r\n    } else if (!mainMenu) {\r\n      piece = spawn();\r\n      if (doesCollide(piece, grid)) {\r\n        // GAME OVER\r\n        // high score?\r\n        piece = null;\r\n        showMainMenu(\"GAME OVER\", { lastScore: round.score });\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction showMainMenu(message, etc) {\r\n  mainMenu = true;\r\n  const menuScreen = h(\"div.main-menu\", [\r\n    h(\"div\", [h(\"h1\", \"Orbital\"), h(\"h2\", \"Radial Matrix\")]),\r\n    h(\"nav\", h(\"div\", \"Hit Enter/Tap to start\")),\r\n    etc && h(\"div.lastScore\", etc.lastScore),\r\n  ]);\r\n  document.querySelector(\"body\").appendChild(menuScreen);\r\n}\r\n\r\nfunction render() {\r\n  renderGrid(grid2);\r\n  // renderFps(ctx, fps);\r\n}\r\n\r\nlet last = timestamp();\r\n\r\nfunction step() {\r\n  let now = timestamp();\r\n  if (startTime === undefined) startTime = now;\r\n  const elapsed = now - startTime;\r\n  let dt = Math.min(1000, now - last);\r\n  update(dt);\r\n  render();\r\n  last = now;\r\n  window.requestAnimationFrame(step);\r\n}\r\n\r\nfunction init() {\r\n  view.setAttribute(\"width\", SCREEN_WIDTH);\r\n  view.setAttribute(\"height\", SCREEN_HEIGHT);\r\n  ctx = view.getContext(\"2d\");\r\n  // modeSelector.init();\r\n  input.init(document, events);\r\n  view.addEventListener(\"click\", getClickHandler());\r\n  document.addEventListener(\"click\", () => events.push([\"input\", \"enter\"]));\r\n\r\n  console.log(getNext());\r\n  showMainMenu();\r\n  window.requestAnimationFrame(step);\r\n}\r\n\r\ninit();\r\n"]}